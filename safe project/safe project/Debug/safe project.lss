
safe project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000013e0  00001474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080017e  0080017e  00001592  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000036c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001672  00000000  00000000  00003840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067d  00000000  00000000  00004eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac8  00000000  00000000  0000552f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  00005ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000567  00000000  00000000  000064b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001388  00000000  00000000  00006a1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 05 	call	0xa1a	; 0xa1a <main>
      8a:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <buzzer_INIT>:

#include "DIO.h"
//make the buzzer in this port output pin
void buzzer_INIT(unsigned char portname,unsigned char pinnumber)
{
	DIO_SETPINDIR(portname,pinnumber,1);
      92:	41 e0       	ldi	r20, 0x01	; 1
      94:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
}
      98:	08 95       	ret

0000009a <buzzer_ON>:
//write on this on logic high
void buzzer_ON(unsigned char portname,unsigned char pinnumber)
{
	DIO_WRITE(portname,pinnumber,1);
      9a:	41 e0       	ldi	r20, 0x01	; 1
      9c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
}
      a0:	08 95       	ret

000000a2 <buzzer_OFF>:
//write on this on logic low
void buzzer_OFF(unsigned char portname,unsigned char pinnumber)
{
	DIO_WRITE(portname,pinnumber,0);
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
}
      a8:	08 95       	ret

000000aa <buzzer_TOGGLE>:
//TOGGLE the output of the buzzer
void buzzer_TOGGLE(unsigned char portname,unsigned char pinnumber)
{
	DIO_togglepin(portname,pinnumber);
      aa:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_togglepin>
}
      ae:	08 95       	ret

000000b0 <buzzer_READ_STATUS>:
unsigned char buzzer_READ_STATUS(unsigned char portname,unsigned char pinnumber)
{
	return DIO_readpin(portname,pinnumber);
      b0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_readpin>
}
      b4:	08 95       	ret

000000b6 <buzzer_set_port_direction>:
void buzzer_set_port_direction(unsigned char portname,unsigned char direction)
{
	DIO_set_port_direction(portname,direction);
      b6:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_set_port_direction>
}
      ba:	08 95       	ret

000000bc <buzzer_toggle_port>:
void buzzer_toggle_port(unsigned char portname)
{
	DIO_toggle_port(portname);
      bc:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_toggle_port>
      c0:	08 95       	ret

000000c2 <DIO_SETPINDIR>:
      c2:	84 34       	cpi	r24, 0x44	; 68
      c4:	09 f4       	brne	.+2      	; 0xc8 <DIO_SETPINDIR+0x6>
      c6:	79 c0       	rjmp	.+242    	; 0x1ba <DIO_SETPINDIR+0xf8>
      c8:	85 34       	cpi	r24, 0x45	; 69
      ca:	48 f4       	brcc	.+18     	; 0xde <DIO_SETPINDIR+0x1c>
      cc:	82 34       	cpi	r24, 0x42	; 66
      ce:	b1 f1       	breq	.+108    	; 0x13c <DIO_SETPINDIR+0x7a>
      d0:	83 34       	cpi	r24, 0x43	; 67
      d2:	08 f0       	brcs	.+2      	; 0xd6 <DIO_SETPINDIR+0x14>
      d4:	53 c0       	rjmp	.+166    	; 0x17c <DIO_SETPINDIR+0xba>
      d6:	81 34       	cpi	r24, 0x41	; 65
      d8:	09 f0       	breq	.+2      	; 0xdc <DIO_SETPINDIR+0x1a>
      da:	8d c0       	rjmp	.+282    	; 0x1f6 <DIO_SETPINDIR+0x134>
      dc:	0f c0       	rjmp	.+30     	; 0xfc <DIO_SETPINDIR+0x3a>
      de:	82 36       	cpi	r24, 0x62	; 98
      e0:	69 f1       	breq	.+90     	; 0x13c <DIO_SETPINDIR+0x7a>
      e2:	83 36       	cpi	r24, 0x63	; 99
      e4:	20 f4       	brcc	.+8      	; 0xee <DIO_SETPINDIR+0x2c>
      e6:	81 36       	cpi	r24, 0x61	; 97
      e8:	09 f0       	breq	.+2      	; 0xec <DIO_SETPINDIR+0x2a>
      ea:	85 c0       	rjmp	.+266    	; 0x1f6 <DIO_SETPINDIR+0x134>
      ec:	07 c0       	rjmp	.+14     	; 0xfc <DIO_SETPINDIR+0x3a>
      ee:	83 36       	cpi	r24, 0x63	; 99
      f0:	09 f4       	brne	.+2      	; 0xf4 <DIO_SETPINDIR+0x32>
      f2:	44 c0       	rjmp	.+136    	; 0x17c <DIO_SETPINDIR+0xba>
      f4:	84 36       	cpi	r24, 0x64	; 100
      f6:	09 f0       	breq	.+2      	; 0xfa <DIO_SETPINDIR+0x38>
      f8:	7e c0       	rjmp	.+252    	; 0x1f6 <DIO_SETPINDIR+0x134>
      fa:	5f c0       	rjmp	.+190    	; 0x1ba <DIO_SETPINDIR+0xf8>
      fc:	41 30       	cpi	r20, 0x01	; 1
      fe:	69 f4       	brne	.+26     	; 0x11a <DIO_SETPINDIR+0x58>
     100:	2a b3       	in	r18, 0x1a	; 26
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	ac 01       	movw	r20, r24
     108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_SETPINDIR+0x4c>
     10a:	44 0f       	add	r20, r20
     10c:	55 1f       	adc	r21, r21
     10e:	6a 95       	dec	r22
     110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_SETPINDIR+0x48>
     112:	ba 01       	movw	r22, r20
     114:	62 2b       	or	r22, r18
     116:	6a bb       	out	0x1a, r22	; 26
     118:	08 95       	ret
     11a:	44 23       	and	r20, r20
     11c:	09 f0       	breq	.+2      	; 0x120 <DIO_SETPINDIR+0x5e>
     11e:	6b c0       	rjmp	.+214    	; 0x1f6 <DIO_SETPINDIR+0x134>
     120:	2a b3       	in	r18, 0x1a	; 26
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	ac 01       	movw	r20, r24
     128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SETPINDIR+0x6c>
     12a:	44 0f       	add	r20, r20
     12c:	55 1f       	adc	r21, r21
     12e:	6a 95       	dec	r22
     130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SETPINDIR+0x68>
     132:	ba 01       	movw	r22, r20
     134:	60 95       	com	r22
     136:	62 23       	and	r22, r18
     138:	6a bb       	out	0x1a, r22	; 26
     13a:	08 95       	ret
     13c:	41 30       	cpi	r20, 0x01	; 1
     13e:	69 f4       	brne	.+26     	; 0x15a <DIO_SETPINDIR+0x98>
     140:	27 b3       	in	r18, 0x17	; 23
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	ac 01       	movw	r20, r24
     148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_SETPINDIR+0x8c>
     14a:	44 0f       	add	r20, r20
     14c:	55 1f       	adc	r21, r21
     14e:	6a 95       	dec	r22
     150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_SETPINDIR+0x88>
     152:	ba 01       	movw	r22, r20
     154:	62 2b       	or	r22, r18
     156:	67 bb       	out	0x17, r22	; 23
     158:	08 95       	ret
     15a:	44 23       	and	r20, r20
     15c:	09 f0       	breq	.+2      	; 0x160 <DIO_SETPINDIR+0x9e>
     15e:	4b c0       	rjmp	.+150    	; 0x1f6 <DIO_SETPINDIR+0x134>
     160:	27 b3       	in	r18, 0x17	; 23
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	ac 01       	movw	r20, r24
     168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_SETPINDIR+0xac>
     16a:	44 0f       	add	r20, r20
     16c:	55 1f       	adc	r21, r21
     16e:	6a 95       	dec	r22
     170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_SETPINDIR+0xa8>
     172:	ba 01       	movw	r22, r20
     174:	60 95       	com	r22
     176:	62 23       	and	r22, r18
     178:	67 bb       	out	0x17, r22	; 23
     17a:	08 95       	ret
     17c:	41 30       	cpi	r20, 0x01	; 1
     17e:	69 f4       	brne	.+26     	; 0x19a <DIO_SETPINDIR+0xd8>
     180:	24 b3       	in	r18, 0x14	; 20
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	ac 01       	movw	r20, r24
     188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SETPINDIR+0xcc>
     18a:	44 0f       	add	r20, r20
     18c:	55 1f       	adc	r21, r21
     18e:	6a 95       	dec	r22
     190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SETPINDIR+0xc8>
     192:	ba 01       	movw	r22, r20
     194:	62 2b       	or	r22, r18
     196:	64 bb       	out	0x14, r22	; 20
     198:	08 95       	ret
     19a:	44 23       	and	r20, r20
     19c:	61 f5       	brne	.+88     	; 0x1f6 <DIO_SETPINDIR+0x134>
     19e:	24 b3       	in	r18, 0x14	; 20
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	ac 01       	movw	r20, r24
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_SETPINDIR+0xea>
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	6a 95       	dec	r22
     1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_SETPINDIR+0xe6>
     1b0:	ba 01       	movw	r22, r20
     1b2:	60 95       	com	r22
     1b4:	62 23       	and	r22, r18
     1b6:	64 bb       	out	0x14, r22	; 20
     1b8:	08 95       	ret
     1ba:	41 30       	cpi	r20, 0x01	; 1
     1bc:	69 f4       	brne	.+26     	; 0x1d8 <DIO_SETPINDIR+0x116>
     1be:	21 b3       	in	r18, 0x11	; 17
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	ac 01       	movw	r20, r24
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SETPINDIR+0x10a>
     1c8:	44 0f       	add	r20, r20
     1ca:	55 1f       	adc	r21, r21
     1cc:	6a 95       	dec	r22
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SETPINDIR+0x106>
     1d0:	ba 01       	movw	r22, r20
     1d2:	62 2b       	or	r22, r18
     1d4:	61 bb       	out	0x11, r22	; 17
     1d6:	08 95       	ret
     1d8:	44 23       	and	r20, r20
     1da:	69 f4       	brne	.+26     	; 0x1f6 <DIO_SETPINDIR+0x134>
     1dc:	21 b3       	in	r18, 0x11	; 17
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	ac 01       	movw	r20, r24
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_SETPINDIR+0x128>
     1e6:	44 0f       	add	r20, r20
     1e8:	55 1f       	adc	r21, r21
     1ea:	6a 95       	dec	r22
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_SETPINDIR+0x124>
     1ee:	ba 01       	movw	r22, r20
     1f0:	60 95       	com	r22
     1f2:	62 23       	and	r22, r18
     1f4:	61 bb       	out	0x11, r22	; 17
     1f6:	08 95       	ret

000001f8 <DIO_WRITE>:
     1f8:	84 34       	cpi	r24, 0x44	; 68
     1fa:	09 f4       	brne	.+2      	; 0x1fe <DIO_WRITE+0x6>
     1fc:	71 c0       	rjmp	.+226    	; 0x2e0 <DIO_WRITE+0xe8>
     1fe:	85 34       	cpi	r24, 0x45	; 69
     200:	48 f4       	brcc	.+18     	; 0x214 <DIO_WRITE+0x1c>
     202:	82 34       	cpi	r24, 0x42	; 66
     204:	99 f1       	breq	.+102    	; 0x26c <DIO_WRITE+0x74>
     206:	83 34       	cpi	r24, 0x43	; 67
     208:	08 f0       	brcs	.+2      	; 0x20c <DIO_WRITE+0x14>
     20a:	4d c0       	rjmp	.+154    	; 0x2a6 <DIO_WRITE+0xae>
     20c:	81 34       	cpi	r24, 0x41	; 65
     20e:	09 f0       	breq	.+2      	; 0x212 <DIO_WRITE+0x1a>
     210:	83 c0       	rjmp	.+262    	; 0x318 <DIO_WRITE+0x120>
     212:	0f c0       	rjmp	.+30     	; 0x232 <DIO_WRITE+0x3a>
     214:	82 36       	cpi	r24, 0x62	; 98
     216:	51 f1       	breq	.+84     	; 0x26c <DIO_WRITE+0x74>
     218:	83 36       	cpi	r24, 0x63	; 99
     21a:	20 f4       	brcc	.+8      	; 0x224 <DIO_WRITE+0x2c>
     21c:	81 36       	cpi	r24, 0x61	; 97
     21e:	09 f0       	breq	.+2      	; 0x222 <DIO_WRITE+0x2a>
     220:	7b c0       	rjmp	.+246    	; 0x318 <DIO_WRITE+0x120>
     222:	07 c0       	rjmp	.+14     	; 0x232 <DIO_WRITE+0x3a>
     224:	83 36       	cpi	r24, 0x63	; 99
     226:	09 f4       	brne	.+2      	; 0x22a <DIO_WRITE+0x32>
     228:	3e c0       	rjmp	.+124    	; 0x2a6 <DIO_WRITE+0xae>
     22a:	84 36       	cpi	r24, 0x64	; 100
     22c:	09 f0       	breq	.+2      	; 0x230 <DIO_WRITE+0x38>
     22e:	74 c0       	rjmp	.+232    	; 0x318 <DIO_WRITE+0x120>
     230:	57 c0       	rjmp	.+174    	; 0x2e0 <DIO_WRITE+0xe8>
     232:	41 30       	cpi	r20, 0x01	; 1
     234:	69 f4       	brne	.+26     	; 0x250 <DIO_WRITE+0x58>
     236:	2b b3       	in	r18, 0x1b	; 27
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	ac 01       	movw	r20, r24
     23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_WRITE+0x4c>
     240:	44 0f       	add	r20, r20
     242:	55 1f       	adc	r21, r21
     244:	6a 95       	dec	r22
     246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_WRITE+0x48>
     248:	ba 01       	movw	r22, r20
     24a:	62 2b       	or	r22, r18
     24c:	6b bb       	out	0x1b, r22	; 27
     24e:	08 95       	ret
     250:	2b b3       	in	r18, 0x1b	; 27
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	ac 01       	movw	r20, r24
     258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_WRITE+0x66>
     25a:	44 0f       	add	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	6a 95       	dec	r22
     260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_WRITE+0x62>
     262:	ba 01       	movw	r22, r20
     264:	60 95       	com	r22
     266:	62 23       	and	r22, r18
     268:	6b bb       	out	0x1b, r22	; 27
     26a:	08 95       	ret
     26c:	41 30       	cpi	r20, 0x01	; 1
     26e:	69 f4       	brne	.+26     	; 0x28a <DIO_WRITE+0x92>
     270:	28 b3       	in	r18, 0x18	; 24
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	ac 01       	movw	r20, r24
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_WRITE+0x86>
     27a:	44 0f       	add	r20, r20
     27c:	55 1f       	adc	r21, r21
     27e:	6a 95       	dec	r22
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_WRITE+0x82>
     282:	ba 01       	movw	r22, r20
     284:	62 2b       	or	r22, r18
     286:	68 bb       	out	0x18, r22	; 24
     288:	08 95       	ret
     28a:	28 b3       	in	r18, 0x18	; 24
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	ac 01       	movw	r20, r24
     292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_WRITE+0xa0>
     294:	44 0f       	add	r20, r20
     296:	55 1f       	adc	r21, r21
     298:	6a 95       	dec	r22
     29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_WRITE+0x9c>
     29c:	ba 01       	movw	r22, r20
     29e:	60 95       	com	r22
     2a0:	62 23       	and	r22, r18
     2a2:	68 bb       	out	0x18, r22	; 24
     2a4:	08 95       	ret
     2a6:	41 30       	cpi	r20, 0x01	; 1
     2a8:	69 f4       	brne	.+26     	; 0x2c4 <DIO_WRITE+0xcc>
     2aa:	25 b3       	in	r18, 0x15	; 21
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	ac 01       	movw	r20, r24
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_WRITE+0xc0>
     2b4:	44 0f       	add	r20, r20
     2b6:	55 1f       	adc	r21, r21
     2b8:	6a 95       	dec	r22
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_WRITE+0xbc>
     2bc:	ba 01       	movw	r22, r20
     2be:	62 2b       	or	r22, r18
     2c0:	65 bb       	out	0x15, r22	; 21
     2c2:	08 95       	ret
     2c4:	25 b3       	in	r18, 0x15	; 21
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	ac 01       	movw	r20, r24
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_WRITE+0xda>
     2ce:	44 0f       	add	r20, r20
     2d0:	55 1f       	adc	r21, r21
     2d2:	6a 95       	dec	r22
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_WRITE+0xd6>
     2d6:	ba 01       	movw	r22, r20
     2d8:	60 95       	com	r22
     2da:	62 23       	and	r22, r18
     2dc:	65 bb       	out	0x15, r22	; 21
     2de:	08 95       	ret
     2e0:	41 30       	cpi	r20, 0x01	; 1
     2e2:	69 f4       	brne	.+26     	; 0x2fe <DIO_WRITE+0x106>
     2e4:	22 b3       	in	r18, 0x12	; 18
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	ac 01       	movw	r20, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_WRITE+0xfa>
     2ee:	44 0f       	add	r20, r20
     2f0:	55 1f       	adc	r21, r21
     2f2:	6a 95       	dec	r22
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_WRITE+0xf6>
     2f6:	ba 01       	movw	r22, r20
     2f8:	62 2b       	or	r22, r18
     2fa:	62 bb       	out	0x12, r22	; 18
     2fc:	08 95       	ret
     2fe:	22 b3       	in	r18, 0x12	; 18
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	ac 01       	movw	r20, r24
     306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_WRITE+0x114>
     308:	44 0f       	add	r20, r20
     30a:	55 1f       	adc	r21, r21
     30c:	6a 95       	dec	r22
     30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_WRITE+0x110>
     310:	ba 01       	movw	r22, r20
     312:	60 95       	com	r22
     314:	62 23       	and	r22, r18
     316:	62 bb       	out	0x12, r22	; 18
     318:	08 95       	ret

0000031a <DIO_togglepin>:
     31a:	84 34       	cpi	r24, 0x44	; 68
     31c:	09 f4       	brne	.+2      	; 0x320 <DIO_togglepin+0x6>
     31e:	3d c0       	rjmp	.+122    	; 0x39a <DIO_togglepin+0x80>
     320:	85 34       	cpi	r24, 0x45	; 69
     322:	40 f4       	brcc	.+16     	; 0x334 <DIO_togglepin+0x1a>
     324:	82 34       	cpi	r24, 0x42	; 66
     326:	f9 f0       	breq	.+62     	; 0x366 <DIO_togglepin+0x4c>
     328:	83 34       	cpi	r24, 0x43	; 67
     32a:	50 f5       	brcc	.+84     	; 0x380 <DIO_togglepin+0x66>
     32c:	81 34       	cpi	r24, 0x41	; 65
     32e:	09 f0       	breq	.+2      	; 0x332 <DIO_togglepin+0x18>
     330:	40 c0       	rjmp	.+128    	; 0x3b2 <DIO_togglepin+0x98>
     332:	0c c0       	rjmp	.+24     	; 0x34c <DIO_togglepin+0x32>
     334:	82 36       	cpi	r24, 0x62	; 98
     336:	b9 f0       	breq	.+46     	; 0x366 <DIO_togglepin+0x4c>
     338:	83 36       	cpi	r24, 0x63	; 99
     33a:	18 f4       	brcc	.+6      	; 0x342 <DIO_togglepin+0x28>
     33c:	81 36       	cpi	r24, 0x61	; 97
     33e:	c9 f5       	brne	.+114    	; 0x3b2 <DIO_togglepin+0x98>
     340:	05 c0       	rjmp	.+10     	; 0x34c <DIO_togglepin+0x32>
     342:	83 36       	cpi	r24, 0x63	; 99
     344:	e9 f0       	breq	.+58     	; 0x380 <DIO_togglepin+0x66>
     346:	84 36       	cpi	r24, 0x64	; 100
     348:	a1 f5       	brne	.+104    	; 0x3b2 <DIO_togglepin+0x98>
     34a:	27 c0       	rjmp	.+78     	; 0x39a <DIO_togglepin+0x80>
     34c:	2b b3       	in	r18, 0x1b	; 27
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	ac 01       	movw	r20, r24
     354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_togglepin+0x40>
     356:	44 0f       	add	r20, r20
     358:	55 1f       	adc	r21, r21
     35a:	6a 95       	dec	r22
     35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_togglepin+0x3c>
     35e:	ba 01       	movw	r22, r20
     360:	62 27       	eor	r22, r18
     362:	6b bb       	out	0x1b, r22	; 27
     364:	08 95       	ret
     366:	28 b3       	in	r18, 0x18	; 24
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	ac 01       	movw	r20, r24
     36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_togglepin+0x5a>
     370:	44 0f       	add	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	6a 95       	dec	r22
     376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_togglepin+0x56>
     378:	ba 01       	movw	r22, r20
     37a:	62 27       	eor	r22, r18
     37c:	68 bb       	out	0x18, r22	; 24
     37e:	08 95       	ret
     380:	25 b3       	in	r18, 0x15	; 21
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	ac 01       	movw	r20, r24
     388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_togglepin+0x74>
     38a:	44 0f       	add	r20, r20
     38c:	55 1f       	adc	r21, r21
     38e:	6a 95       	dec	r22
     390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_togglepin+0x70>
     392:	ba 01       	movw	r22, r20
     394:	62 27       	eor	r22, r18
     396:	65 bb       	out	0x15, r22	; 21
     398:	08 95       	ret
     39a:	22 b3       	in	r18, 0x12	; 18
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	ac 01       	movw	r20, r24
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_togglepin+0x8e>
     3a4:	44 0f       	add	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	6a 95       	dec	r22
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_togglepin+0x8a>
     3ac:	ba 01       	movw	r22, r20
     3ae:	62 27       	eor	r22, r18
     3b0:	62 bb       	out	0x12, r22	; 18
     3b2:	08 95       	ret

000003b4 <DIO_readpin>:
     3b4:	84 34       	cpi	r24, 0x44	; 68
     3b6:	09 f4       	brne	.+2      	; 0x3ba <DIO_readpin+0x6>
     3b8:	4e c0       	rjmp	.+156    	; 0x456 <DIO_readpin+0xa2>
     3ba:	85 34       	cpi	r24, 0x45	; 69
     3bc:	40 f4       	brcc	.+16     	; 0x3ce <DIO_readpin+0x1a>
     3be:	82 34       	cpi	r24, 0x42	; 66
     3c0:	31 f1       	breq	.+76     	; 0x40e <DIO_readpin+0x5a>
     3c2:	83 34       	cpi	r24, 0x43	; 67
     3c4:	b0 f5       	brcc	.+108    	; 0x432 <DIO_readpin+0x7e>
     3c6:	81 34       	cpi	r24, 0x41	; 65
     3c8:	09 f0       	breq	.+2      	; 0x3cc <DIO_readpin+0x18>
     3ca:	57 c0       	rjmp	.+174    	; 0x47a <DIO_readpin+0xc6>
     3cc:	0e c0       	rjmp	.+28     	; 0x3ea <DIO_readpin+0x36>
     3ce:	82 36       	cpi	r24, 0x62	; 98
     3d0:	f1 f0       	breq	.+60     	; 0x40e <DIO_readpin+0x5a>
     3d2:	83 36       	cpi	r24, 0x63	; 99
     3d4:	20 f4       	brcc	.+8      	; 0x3de <DIO_readpin+0x2a>
     3d6:	81 36       	cpi	r24, 0x61	; 97
     3d8:	09 f0       	breq	.+2      	; 0x3dc <DIO_readpin+0x28>
     3da:	4f c0       	rjmp	.+158    	; 0x47a <DIO_readpin+0xc6>
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <DIO_readpin+0x36>
     3de:	83 36       	cpi	r24, 0x63	; 99
     3e0:	41 f1       	breq	.+80     	; 0x432 <DIO_readpin+0x7e>
     3e2:	84 36       	cpi	r24, 0x64	; 100
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <DIO_readpin+0x34>
     3e6:	49 c0       	rjmp	.+146    	; 0x47a <DIO_readpin+0xc6>
     3e8:	36 c0       	rjmp	.+108    	; 0x456 <DIO_readpin+0xa2>
     3ea:	29 b3       	in	r18, 0x19	; 25
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	06 2e       	mov	r0, r22
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_readpin+0x44>
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	0a 94       	dec	r0
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_readpin+0x40>
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	82 23       	and	r24, r18
     400:	93 23       	and	r25, r19
     402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_readpin+0x54>
     404:	95 95       	asr	r25
     406:	87 95       	ror	r24
     408:	6a 95       	dec	r22
     40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_readpin+0x50>
     40c:	08 95       	ret
     40e:	26 b3       	in	r18, 0x16	; 22
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	06 2e       	mov	r0, r22
     416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_readpin+0x68>
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	0a 94       	dec	r0
     41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_readpin+0x64>
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	82 23       	and	r24, r18
     424:	93 23       	and	r25, r19
     426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_readpin+0x78>
     428:	95 95       	asr	r25
     42a:	87 95       	ror	r24
     42c:	6a 95       	dec	r22
     42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_readpin+0x74>
     430:	08 95       	ret
     432:	23 b3       	in	r18, 0x13	; 19
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	06 2e       	mov	r0, r22
     43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_readpin+0x8c>
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	0a 94       	dec	r0
     442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_readpin+0x88>
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	82 23       	and	r24, r18
     448:	93 23       	and	r25, r19
     44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_readpin+0x9c>
     44c:	95 95       	asr	r25
     44e:	87 95       	ror	r24
     450:	6a 95       	dec	r22
     452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_readpin+0x98>
     454:	08 95       	ret
     456:	20 b3       	in	r18, 0x10	; 16
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	06 2e       	mov	r0, r22
     45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_readpin+0xb0>
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_readpin+0xac>
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	82 23       	and	r24, r18
     46c:	93 23       	and	r25, r19
     46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_readpin+0xc0>
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	6a 95       	dec	r22
     476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_readpin+0xbc>
     478:	08 95       	ret
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	08 95       	ret

0000047e <DIO_set_port_direction>:
     47e:	84 34       	cpi	r24, 0x44	; 68
     480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_set_port_direction+0x3a>
     482:	85 34       	cpi	r24, 0x45	; 69
     484:	38 f4       	brcc	.+14     	; 0x494 <DIO_set_port_direction+0x16>
     486:	82 34       	cpi	r24, 0x42	; 66
     488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_set_port_direction+0x32>
     48a:	83 34       	cpi	r24, 0x43	; 67
     48c:	98 f4       	brcc	.+38     	; 0x4b4 <DIO_set_port_direction+0x36>
     48e:	81 34       	cpi	r24, 0x41	; 65
     490:	a1 f4       	brne	.+40     	; 0x4ba <DIO_set_port_direction+0x3c>
     492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_set_port_direction+0x2e>
     494:	82 36       	cpi	r24, 0x62	; 98
     496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_set_port_direction+0x32>
     498:	83 36       	cpi	r24, 0x63	; 99
     49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_set_port_direction+0x24>
     49c:	81 36       	cpi	r24, 0x61	; 97
     49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_set_port_direction+0x3c>
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_set_port_direction+0x2e>
     4a2:	83 36       	cpi	r24, 0x63	; 99
     4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_set_port_direction+0x36>
     4a6:	84 36       	cpi	r24, 0x64	; 100
     4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_set_port_direction+0x3c>
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_set_port_direction+0x3a>
     4ac:	6a bb       	out	0x1a, r22	; 26
     4ae:	08 95       	ret
     4b0:	67 bb       	out	0x17, r22	; 23
     4b2:	08 95       	ret
     4b4:	64 bb       	out	0x14, r22	; 20
     4b6:	08 95       	ret
     4b8:	61 bb       	out	0x11, r22	; 17
     4ba:	08 95       	ret

000004bc <DIO_write_port>:
     4bc:	84 34       	cpi	r24, 0x44	; 68
     4be:	d9 f0       	breq	.+54     	; 0x4f6 <DIO_write_port+0x3a>
     4c0:	85 34       	cpi	r24, 0x45	; 69
     4c2:	38 f4       	brcc	.+14     	; 0x4d2 <DIO_write_port+0x16>
     4c4:	82 34       	cpi	r24, 0x42	; 66
     4c6:	99 f0       	breq	.+38     	; 0x4ee <DIO_write_port+0x32>
     4c8:	83 34       	cpi	r24, 0x43	; 67
     4ca:	98 f4       	brcc	.+38     	; 0x4f2 <DIO_write_port+0x36>
     4cc:	81 34       	cpi	r24, 0x41	; 65
     4ce:	a1 f4       	brne	.+40     	; 0x4f8 <DIO_write_port+0x3c>
     4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_write_port+0x2e>
     4d2:	82 36       	cpi	r24, 0x62	; 98
     4d4:	61 f0       	breq	.+24     	; 0x4ee <DIO_write_port+0x32>
     4d6:	83 36       	cpi	r24, 0x63	; 99
     4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_write_port+0x24>
     4da:	81 36       	cpi	r24, 0x61	; 97
     4dc:	69 f4       	brne	.+26     	; 0x4f8 <DIO_write_port+0x3c>
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <DIO_write_port+0x2e>
     4e0:	83 36       	cpi	r24, 0x63	; 99
     4e2:	39 f0       	breq	.+14     	; 0x4f2 <DIO_write_port+0x36>
     4e4:	84 36       	cpi	r24, 0x64	; 100
     4e6:	41 f4       	brne	.+16     	; 0x4f8 <DIO_write_port+0x3c>
     4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <DIO_write_port+0x3a>
     4ea:	6b bb       	out	0x1b, r22	; 27
     4ec:	08 95       	ret
     4ee:	68 bb       	out	0x18, r22	; 24
     4f0:	08 95       	ret
     4f2:	65 bb       	out	0x15, r22	; 21
     4f4:	08 95       	ret
     4f6:	62 bb       	out	0x12, r22	; 18
     4f8:	08 95       	ret

000004fa <DIO_read_port>:
     4fa:	84 34       	cpi	r24, 0x44	; 68
     4fc:	d9 f0       	breq	.+54     	; 0x534 <DIO_read_port+0x3a>
     4fe:	85 34       	cpi	r24, 0x45	; 69
     500:	38 f4       	brcc	.+14     	; 0x510 <DIO_read_port+0x16>
     502:	82 34       	cpi	r24, 0x42	; 66
     504:	99 f0       	breq	.+38     	; 0x52c <DIO_read_port+0x32>
     506:	83 34       	cpi	r24, 0x43	; 67
     508:	98 f4       	brcc	.+38     	; 0x530 <DIO_read_port+0x36>
     50a:	81 34       	cpi	r24, 0x41	; 65
     50c:	a9 f4       	brne	.+42     	; 0x538 <DIO_read_port+0x3e>
     50e:	0c c0       	rjmp	.+24     	; 0x528 <DIO_read_port+0x2e>
     510:	82 36       	cpi	r24, 0x62	; 98
     512:	61 f0       	breq	.+24     	; 0x52c <DIO_read_port+0x32>
     514:	83 36       	cpi	r24, 0x63	; 99
     516:	18 f4       	brcc	.+6      	; 0x51e <DIO_read_port+0x24>
     518:	81 36       	cpi	r24, 0x61	; 97
     51a:	71 f4       	brne	.+28     	; 0x538 <DIO_read_port+0x3e>
     51c:	05 c0       	rjmp	.+10     	; 0x528 <DIO_read_port+0x2e>
     51e:	83 36       	cpi	r24, 0x63	; 99
     520:	39 f0       	breq	.+14     	; 0x530 <DIO_read_port+0x36>
     522:	84 36       	cpi	r24, 0x64	; 100
     524:	49 f4       	brne	.+18     	; 0x538 <DIO_read_port+0x3e>
     526:	06 c0       	rjmp	.+12     	; 0x534 <DIO_read_port+0x3a>
     528:	89 b3       	in	r24, 0x19	; 25
     52a:	08 95       	ret
     52c:	86 b3       	in	r24, 0x16	; 22
     52e:	08 95       	ret
     530:	83 b3       	in	r24, 0x13	; 19
     532:	08 95       	ret
     534:	80 b3       	in	r24, 0x10	; 16
     536:	08 95       	ret
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	08 95       	ret

0000053c <DIO_toggle_port>:
     53c:	84 34       	cpi	r24, 0x44	; 68
     53e:	09 f1       	breq	.+66     	; 0x582 <DIO_toggle_port+0x46>
     540:	85 34       	cpi	r24, 0x45	; 69
     542:	38 f4       	brcc	.+14     	; 0x552 <DIO_toggle_port+0x16>
     544:	82 34       	cpi	r24, 0x42	; 66
     546:	a9 f0       	breq	.+42     	; 0x572 <DIO_toggle_port+0x36>
     548:	83 34       	cpi	r24, 0x43	; 67
     54a:	b8 f4       	brcc	.+46     	; 0x57a <DIO_toggle_port+0x3e>
     54c:	81 34       	cpi	r24, 0x41	; 65
     54e:	e1 f4       	brne	.+56     	; 0x588 <DIO_toggle_port+0x4c>
     550:	0c c0       	rjmp	.+24     	; 0x56a <DIO_toggle_port+0x2e>
     552:	82 36       	cpi	r24, 0x62	; 98
     554:	71 f0       	breq	.+28     	; 0x572 <DIO_toggle_port+0x36>
     556:	83 36       	cpi	r24, 0x63	; 99
     558:	18 f4       	brcc	.+6      	; 0x560 <DIO_toggle_port+0x24>
     55a:	81 36       	cpi	r24, 0x61	; 97
     55c:	a9 f4       	brne	.+42     	; 0x588 <DIO_toggle_port+0x4c>
     55e:	05 c0       	rjmp	.+10     	; 0x56a <DIO_toggle_port+0x2e>
     560:	83 36       	cpi	r24, 0x63	; 99
     562:	59 f0       	breq	.+22     	; 0x57a <DIO_toggle_port+0x3e>
     564:	84 36       	cpi	r24, 0x64	; 100
     566:	81 f4       	brne	.+32     	; 0x588 <DIO_toggle_port+0x4c>
     568:	0c c0       	rjmp	.+24     	; 0x582 <DIO_toggle_port+0x46>
     56a:	8b b3       	in	r24, 0x1b	; 27
     56c:	80 95       	com	r24
     56e:	8b bb       	out	0x1b, r24	; 27
     570:	08 95       	ret
     572:	88 b3       	in	r24, 0x18	; 24
     574:	80 95       	com	r24
     576:	88 bb       	out	0x18, r24	; 24
     578:	08 95       	ret
     57a:	85 b3       	in	r24, 0x15	; 21
     57c:	80 95       	com	r24
     57e:	85 bb       	out	0x15, r24	; 21
     580:	08 95       	ret
     582:	82 b3       	in	r24, 0x12	; 18
     584:	80 95       	com	r24
     586:	82 bb       	out	0x12, r24	; 18
     588:	08 95       	ret

0000058a <DIO_CONNECT_PULLUP>:
     58a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
     58e:	08 95       	ret

00000590 <DIO_WRITE_LOW_NIBBLE>:
     590:	cf 92       	push	r12
     592:	df 92       	push	r13
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	f8 2e       	mov	r15, r24
     5a0:	c0 e0       	ldi	r28, 0x00	; 0
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
     5a4:	01 e0       	ldi	r16, 0x01	; 1
     5a6:	10 e0       	ldi	r17, 0x00	; 0
     5a8:	c6 2e       	mov	r12, r22
     5aa:	dd 24       	eor	r13, r13
     5ac:	c8 01       	movw	r24, r16
     5ae:	0c 2e       	mov	r0, r28
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_WRITE_LOW_NIBBLE+0x26>
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	0a 94       	dec	r0
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_WRITE_LOW_NIBBLE+0x22>
     5ba:	8c 21       	and	r24, r12
     5bc:	9d 21       	and	r25, r13
     5be:	9c 01       	movw	r18, r24
     5c0:	0c 2e       	mov	r0, r28
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_WRITE_LOW_NIBBLE+0x38>
     5c4:	35 95       	asr	r19
     5c6:	27 95       	ror	r18
     5c8:	0a 94       	dec	r0
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_WRITE_LOW_NIBBLE+0x34>
     5cc:	a9 01       	movw	r20, r18
     5ce:	8f 2d       	mov	r24, r15
     5d0:	6c 2f       	mov	r22, r28
     5d2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
     5d6:	21 96       	adiw	r28, 0x01	; 1
     5d8:	c4 30       	cpi	r28, 0x04	; 4
     5da:	d1 05       	cpc	r29, r1
     5dc:	39 f7       	brne	.-50     	; 0x5ac <DIO_WRITE_LOW_NIBBLE+0x1c>
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	08 95       	ret

000005ee <DIO_WRITE_HIGH_NIBBLE>:
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	f8 2e       	mov	r15, r24
     5fe:	c0 e0       	ldi	r28, 0x00	; 0
     600:	d0 e0       	ldi	r29, 0x00	; 0
     602:	01 e0       	ldi	r16, 0x01	; 1
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	c6 2e       	mov	r12, r22
     608:	dd 24       	eor	r13, r13
     60a:	6c 2f       	mov	r22, r28
     60c:	6c 5f       	subi	r22, 0xFC	; 252
     60e:	c8 01       	movw	r24, r16
     610:	0c 2e       	mov	r0, r28
     612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_WRITE_HIGH_NIBBLE+0x2a>
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	0a 94       	dec	r0
     61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_WRITE_HIGH_NIBBLE+0x26>
     61c:	8c 21       	and	r24, r12
     61e:	9d 21       	and	r25, r13
     620:	9c 01       	movw	r18, r24
     622:	0c 2e       	mov	r0, r28
     624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_WRITE_HIGH_NIBBLE+0x3c>
     626:	35 95       	asr	r19
     628:	27 95       	ror	r18
     62a:	0a 94       	dec	r0
     62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_WRITE_HIGH_NIBBLE+0x38>
     62e:	a9 01       	movw	r20, r18
     630:	8f 2d       	mov	r24, r15
     632:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
     636:	21 96       	adiw	r28, 0x01	; 1
     638:	c4 30       	cpi	r28, 0x04	; 4
     63a:	d1 05       	cpc	r29, r1
     63c:	31 f7       	brne	.-52     	; 0x60a <DIO_WRITE_HIGH_NIBBLE+0x1c>
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	08 95       	ret

0000064e <DIO_WRITE_NIBBLE>:
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	08 2f       	mov	r16, r24
     660:	16 2f       	mov	r17, r22
     662:	c0 e0       	ldi	r28, 0x00	; 0
     664:	d0 e0       	ldi	r29, 0x00	; 0
     666:	ee 24       	eor	r14, r14
     668:	ff 24       	eor	r15, r15
     66a:	e3 94       	inc	r14
     66c:	c4 2e       	mov	r12, r20
     66e:	dd 24       	eor	r13, r13
     670:	6c 2f       	mov	r22, r28
     672:	61 0f       	add	r22, r17
     674:	c7 01       	movw	r24, r14
     676:	0c 2e       	mov	r0, r28
     678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_WRITE_NIBBLE+0x30>
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	0a 94       	dec	r0
     680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_WRITE_NIBBLE+0x2c>
     682:	8c 21       	and	r24, r12
     684:	9d 21       	and	r25, r13
     686:	9c 01       	movw	r18, r24
     688:	0c 2e       	mov	r0, r28
     68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_WRITE_NIBBLE+0x42>
     68c:	35 95       	asr	r19
     68e:	27 95       	ror	r18
     690:	0a 94       	dec	r0
     692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_WRITE_NIBBLE+0x3e>
     694:	a9 01       	movw	r20, r18
     696:	80 2f       	mov	r24, r16
     698:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
     69c:	21 96       	adiw	r28, 0x01	; 1
     69e:	c4 30       	cpi	r28, 0x04	; 4
     6a0:	d1 05       	cpc	r29, r1
     6a2:	31 f7       	brne	.-52     	; 0x670 <DIO_WRITE_NIBBLE+0x22>
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	08 95       	ret

000006b6 <DIO_SET_DIR_NIPPLE>:
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	08 2f       	mov	r16, r24
     6c8:	16 2f       	mov	r17, r22
     6ca:	c0 e0       	ldi	r28, 0x00	; 0
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
     6ce:	ee 24       	eor	r14, r14
     6d0:	ff 24       	eor	r15, r15
     6d2:	e3 94       	inc	r14
     6d4:	c4 2e       	mov	r12, r20
     6d6:	dd 24       	eor	r13, r13
     6d8:	6c 2f       	mov	r22, r28
     6da:	61 0f       	add	r22, r17
     6dc:	c7 01       	movw	r24, r14
     6de:	0c 2e       	mov	r0, r28
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_SET_DIR_NIPPLE+0x30>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	0a 94       	dec	r0
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_SET_DIR_NIPPLE+0x2c>
     6ea:	8c 21       	and	r24, r12
     6ec:	9d 21       	and	r25, r13
     6ee:	9c 01       	movw	r18, r24
     6f0:	0c 2e       	mov	r0, r28
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_SET_DIR_NIPPLE+0x42>
     6f4:	35 95       	asr	r19
     6f6:	27 95       	ror	r18
     6f8:	0a 94       	dec	r0
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_SET_DIR_NIPPLE+0x3e>
     6fc:	a9 01       	movw	r20, r18
     6fe:	80 2f       	mov	r24, r16
     700:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
     704:	21 96       	adiw	r28, 0x01	; 1
     706:	c4 30       	cpi	r28, 0x04	; 4
     708:	d1 05       	cpc	r29, r1
     70a:	31 f7       	brne	.-52     	; 0x6d8 <DIO_SET_DIR_NIPPLE+0x22>
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	08 95       	ret

0000071e <EEPROM_WRITE>:


void EEPROM_WRITE (unsigned short address , unsigned char data)
{
	//SET UP address register
	EEARL=(char)address;
     71e:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     720:	9f bb       	out	0x1f, r25	; 31
	//SET UP data register
	EEDR=data;
     722:	6d bb       	out	0x1d, r22	; 29
	//write logical 1 to EEMWE	
	SET_BIT(EECR,EEMWE);
     724:	e2 9a       	sbi	0x1c, 2	; 28
	//START EEPROM to write by setting EEWE by logical 1
	SET_BIT(EECR,EEWE);
     726:	e1 9a       	sbi	0x1c, 1	; 28
	//WAIT for compilation of write process
	while(READ_BIT(EECR,EEWE) == 1);
     728:	e1 99       	sbic	0x1c, 1	; 28
     72a:	fe cf       	rjmp	.-4      	; 0x728 <EEPROM_WRITE+0xa>
}
     72c:	08 95       	ret

0000072e <EEPROM_READ>:

unsigned char EEPROM_READ (unsigned short address)
{
	//SET UP address register
	EEARL=(char)address;
     72e:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     730:	9f bb       	out	0x1f, r25	; 31
	//write logical 1 to EERE
	SET_BIT(EECR,EERE);
     732:	e0 9a       	sbi	0x1c, 0	; 28
	//return data from data register
	return EEDR;
     734:	8d b3       	in	r24, 0x1d	; 29
     736:	08 95       	ret

00000738 <keybad_init>:
		DIO_SETPINDIR(keypad_port,i,1);
		DIO_SETPINDIR(keypad_port,i+4,0);
		DIO_CONNECT_PULLUP(keypad_port,i+4,1);
	}*/
	
	DIO_SETPINDIR(keypad_port,0,1);
     738:	83 e6       	ldi	r24, 0x63	; 99
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	41 e0       	ldi	r20, 0x01	; 1
     73e:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(keypad_port,1,1);
     742:	83 e6       	ldi	r24, 0x63	; 99
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(keypad_port,2,1);
     74c:	83 e6       	ldi	r24, 0x63	; 99
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	41 e0       	ldi	r20, 0x01	; 1
     752:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(keypad_port,3,1);
     756:	83 e6       	ldi	r24, 0x63	; 99
     758:	63 e0       	ldi	r22, 0x03	; 3
     75a:	41 e0       	ldi	r20, 0x01	; 1
     75c:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(keypad_port,4,0);
     760:	83 e6       	ldi	r24, 0x63	; 99
     762:	64 e0       	ldi	r22, 0x04	; 4
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(keypad_port,5,0);
     76a:	83 e6       	ldi	r24, 0x63	; 99
     76c:	65 e0       	ldi	r22, 0x05	; 5
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(keypad_port,6,0);
     774:	83 e6       	ldi	r24, 0x63	; 99
     776:	66 e0       	ldi	r22, 0x06	; 6
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(keypad_port,7,0);
     77e:	83 e6       	ldi	r24, 0x63	; 99
     780:	67 e0       	ldi	r22, 0x07	; 7
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_CONNECT_PULLUP(keypad_port,4,1);
     788:	83 e6       	ldi	r24, 0x63	; 99
     78a:	64 e0       	ldi	r22, 0x04	; 4
     78c:	41 e0       	ldi	r20, 0x01	; 1
     78e:	0e 94 c5 02 	call	0x58a	; 0x58a <DIO_CONNECT_PULLUP>
	DIO_CONNECT_PULLUP(keypad_port,5,1);
     792:	83 e6       	ldi	r24, 0x63	; 99
     794:	65 e0       	ldi	r22, 0x05	; 5
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	0e 94 c5 02 	call	0x58a	; 0x58a <DIO_CONNECT_PULLUP>
	DIO_CONNECT_PULLUP(keypad_port,6,1);
     79c:	83 e6       	ldi	r24, 0x63	; 99
     79e:	66 e0       	ldi	r22, 0x06	; 6
     7a0:	41 e0       	ldi	r20, 0x01	; 1
     7a2:	0e 94 c5 02 	call	0x58a	; 0x58a <DIO_CONNECT_PULLUP>
	DIO_CONNECT_PULLUP(keypad_port,7,1);	
     7a6:	83 e6       	ldi	r24, 0x63	; 99
     7a8:	67 e0       	ldi	r22, 0x07	; 7
     7aa:	41 e0       	ldi	r20, 0x01	; 1
     7ac:	0e 94 c5 02 	call	0x58a	; 0x58a <DIO_CONNECT_PULLUP>
	
}
     7b0:	08 95       	ret

000007b2 <keybad_check_press>:

 char keybad_check_press()
{
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	60 97       	sbiw	r28, 0x10	; 16
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
	//hardware
	//char arr[4][4]={{'1','2','3','+'},{'4','5','6','-'},{'7','8','9','/'},{'*','0','#','='}};
	//protus
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     7ca:	de 01       	movw	r26, r28
     7cc:	11 96       	adiw	r26, 0x01	; 1
     7ce:	e0 e6       	ldi	r30, 0x60	; 96
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 e1       	ldi	r24, 0x10	; 16
     7d4:	01 90       	ld	r0, Z+
     7d6:	0d 92       	st	X+, r0
     7d8:	81 50       	subi	r24, 0x01	; 1
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <keybad_check_press+0x22>
	unsigned char row,coloumn,x;
	unsigned char return_val=unpressed;
	for(row=0;row<4;row++)
     7dc:	00 e0       	ldi	r16, 0x00	; 0
	{
		DIO_WRITE(keypad_port,0,1);
     7de:	83 e6       	ldi	r24, 0x63	; 99
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	41 e0       	ldi	r20, 0x01	; 1
     7e4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
		DIO_WRITE(keypad_port,1,1);
     7e8:	83 e6       	ldi	r24, 0x63	; 99
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
		DIO_WRITE(keypad_port,2,1);
     7f2:	83 e6       	ldi	r24, 0x63	; 99
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
		DIO_WRITE(keypad_port,3,1);
     7fc:	83 e6       	ldi	r24, 0x63	; 99
     7fe:	63 e0       	ldi	r22, 0x03	; 3
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
		DIO_WRITE(keypad_port,row,0);
     806:	83 e6       	ldi	r24, 0x63	; 99
     808:	60 2f       	mov	r22, r16
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
		for(coloumn=0;coloumn<4;coloumn++)
     810:	10 e0       	ldi	r17, 0x00	; 0
		{
			x=DIO_readpin(keypad_port,(coloumn+4));
     812:	61 2f       	mov	r22, r17
     814:	6c 5f       	subi	r22, 0xFC	; 252
     816:	83 e6       	ldi	r24, 0x63	; 99
     818:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_readpin>
			if(x == 0)
     81c:	88 23       	and	r24, r24
     81e:	61 f4       	brne	.+24     	; 0x838 <keybad_check_press+0x86>
			{
				return_val=arr[row][coloumn];
     820:	e0 2f       	mov	r30, r16
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	ee 0f       	add	r30, r30
     826:	ff 1f       	adc	r31, r31
     828:	ee 0f       	add	r30, r30
     82a:	ff 1f       	adc	r31, r31
     82c:	e1 0f       	add	r30, r17
     82e:	f1 1d       	adc	r31, r1
     830:	ec 0f       	add	r30, r28
     832:	fd 1f       	adc	r31, r29
     834:	81 81       	ldd	r24, Z+1	; 0x01
     836:	04 c0       	rjmp	.+8      	; 0x840 <keybad_check_press+0x8e>
		DIO_WRITE(keypad_port,0,1);
		DIO_WRITE(keypad_port,1,1);
		DIO_WRITE(keypad_port,2,1);
		DIO_WRITE(keypad_port,3,1);
		DIO_WRITE(keypad_port,row,0);
		for(coloumn=0;coloumn<4;coloumn++)
     838:	1f 5f       	subi	r17, 0xFF	; 255
     83a:	14 30       	cpi	r17, 0x04	; 4
     83c:	51 f7       	brne	.-44     	; 0x812 <keybad_check_press+0x60>
     83e:	0b c0       	rjmp	.+22     	; 0x856 <keybad_check_press+0xa4>
		{
			break;
		}
	}
	return return_val;	
     840:	60 96       	adiw	r28, 0x10	; 16
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	08 95       	ret
	//char arr[4][4]={{'1','2','3','+'},{'4','5','6','-'},{'7','8','9','/'},{'*','0','#','='}};
	//protus
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	unsigned char row,coloumn,x;
	unsigned char return_val=unpressed;
	for(row=0;row<4;row++)
     856:	0f 5f       	subi	r16, 0xFF	; 255
     858:	04 30       	cpi	r16, 0x04	; 4
     85a:	09 f6       	brne	.-126    	; 0x7de <keybad_check_press+0x2c>
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	f0 cf       	rjmp	.-32     	; 0x840 <keybad_check_press+0x8e>

00000860 <enable>:
		_delay_ms(1);
	}
}	
void enable()
{
	DIO_WRITE(port_control,EN,1);
     860:	81 e4       	ldi	r24, 0x41	; 65
     862:	64 e0       	ldi	r22, 0x04	; 4
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86a:	8f e9       	ldi	r24, 0x9F	; 159
     86c:	9f e0       	ldi	r25, 0x0F	; 15
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <enable+0xe>
     872:	00 c0       	rjmp	.+0      	; 0x874 <enable+0x14>
     874:	00 00       	nop
	_delay_ms(2);
	DIO_WRITE(port_control,EN,0);
     876:	81 e4       	ldi	r24, 0x41	; 65
     878:	64 e0       	ldi	r22, 0x04	; 4
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
     880:	8f e9       	ldi	r24, 0x9F	; 159
     882:	9f e0       	ldi	r25, 0x0F	; 15
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <enable+0x24>
     888:	00 c0       	rjmp	.+0      	; 0x88a <enable+0x2a>
     88a:	00 00       	nop
	_delay_ms(2);
     88c:	08 95       	ret

0000088e <LCD_SEND_CMD>:
		
	#endif
}

void LCD_SEND_CMD (unsigned char cmd)
{
     88e:	cf 93       	push	r28
     890:	c8 2f       	mov	r28, r24
	DIO_WRITE_HIGH_NIBBLE(port_data,cmd>>4);
	enable();
	DIO_WRITE_HIGH_NIBBLE(port_data,cmd);
	enable();
	#elif defined LOW_NIPPLE
	DIO_WRITE(port_control,RS,0);
     892:	81 e4       	ldi	r24, 0x41	; 65
     894:	66 e0       	ldi	r22, 0x06	; 6
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
	DIO_WRITE_LOW_NIBBLE(port_data,cmd>>4);
     89c:	6c 2f       	mov	r22, r28
     89e:	62 95       	swap	r22
     8a0:	6f 70       	andi	r22, 0x0F	; 15
     8a2:	81 e4       	ldi	r24, 0x41	; 65
     8a4:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_WRITE_LOW_NIBBLE>
	enable();
     8a8:	0e 94 30 04 	call	0x860	; 0x860 <enable>
	DIO_WRITE_LOW_NIBBLE(port_data,cmd);
     8ac:	81 e4       	ldi	r24, 0x41	; 65
     8ae:	6c 2f       	mov	r22, r28
     8b0:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_WRITE_LOW_NIBBLE>
	enable();
     8b4:	0e 94 30 04 	call	0x860	; 0x860 <enable>
	enable();
	_delay_ms(1);  //write this and if the cmd is clear screen or return home write after it delay 10 ms or do not write it in the function and after calling this function in main make a delay
	#endif
	#endif

}
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <lCD_MOVE_CURSOR>:
}

void lCD_MOVE_CURSOR (unsigned char row,unsigned char column)
{
	char cmd;
	if(row<1 || row>2 || column<1 || column>16)  // any invalid case
     8bc:	98 2f       	mov	r25, r24
     8be:	91 50       	subi	r25, 0x01	; 1
     8c0:	92 30       	cpi	r25, 0x02	; 2
     8c2:	60 f4       	brcc	.+24     	; 0x8dc <lCD_MOVE_CURSOR+0x20>
     8c4:	66 23       	and	r22, r22
     8c6:	61 f0       	breq	.+24     	; 0x8e0 <lCD_MOVE_CURSOR+0x24>
     8c8:	61 31       	cpi	r22, 0x11	; 17
     8ca:	60 f4       	brcc	.+24     	; 0x8e4 <lCD_MOVE_CURSOR+0x28>
	{
		cmd=0X80;
	}
	else if(row == 1)
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <lCD_MOVE_CURSOR+0x1a>
	{
		cmd=0X80+column-1;
     8d0:	86 2f       	mov	r24, r22
     8d2:	81 58       	subi	r24, 0x81	; 129
     8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <lCD_MOVE_CURSOR+0x2a>
	}
	else
	{
		cmd=0XC0+column-1;
     8d6:	86 2f       	mov	r24, r22
     8d8:	81 54       	subi	r24, 0x41	; 65
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <lCD_MOVE_CURSOR+0x2a>
void lCD_MOVE_CURSOR (unsigned char row,unsigned char column)
{
	char cmd;
	if(row<1 || row>2 || column<1 || column>16)  // any invalid case
	{
		cmd=0X80;
     8dc:	80 e8       	ldi	r24, 0x80	; 128
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <lCD_MOVE_CURSOR+0x2a>
     8e0:	80 e8       	ldi	r24, 0x80	; 128
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <lCD_MOVE_CURSOR+0x2a>
     8e4:	80 e8       	ldi	r24, 0x80	; 128
	}
	else
	{
		cmd=0XC0+column-1;
	}
	LCD_SEND_CMD(cmd);
     8e6:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
}
     8ea:	08 95       	ret

000008ec <LCD_Return_home>:
	_delay_ms(10);
}

void LCD_Return_home()
{
	LCD_SEND_CMD(Return_Home);
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
     8f2:	8f e1       	ldi	r24, 0x1F	; 31
     8f4:	9e e4       	ldi	r25, 0x4E	; 78
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <LCD_Return_home+0xa>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <LCD_Return_home+0x10>
     8fc:	00 00       	nop
	_delay_ms(10);
}
     8fe:	08 95       	ret

00000900 <LCD_CLEAR_SCREEN>:

}

void LCD_CLEAR_SCREEN()
{
	LCD_SEND_CMD(clear_screen);
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
     906:	8f e1       	ldi	r24, 0x1F	; 31
     908:	9e e4       	ldi	r25, 0x4E	; 78
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <LCD_CLEAR_SCREEN+0xa>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <LCD_CLEAR_SCREEN+0x10>
     910:	00 00       	nop
	_delay_ms(10);
}
     912:	08 95       	ret

00000914 <LCD_INIT>:
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	91 ee       	ldi	r25, 0xE1	; 225
     918:	a4 e0       	ldi	r26, 0x04	; 4
     91a:	81 50       	subi	r24, 0x01	; 1
     91c:	90 40       	sbci	r25, 0x00	; 0
     91e:	a0 40       	sbci	r26, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <LCD_INIT+0x6>
     922:	00 c0       	rjmp	.+0      	; 0x924 <LCD_INIT+0x10>
     924:	00 00       	nop
	DIO_SETPINDIR(port_data,4,1);
	DIO_SETPINDIR(port_data,5,1);
	DIO_SETPINDIR(port_data,6,1);
	DIO_SETPINDIR(port_data,7,1);
	#elif defined LOW_NIPPLE
	DIO_SETPINDIR(port_data,0,1);
     926:	81 e4       	ldi	r24, 0x41	; 65
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	41 e0       	ldi	r20, 0x01	; 1
     92c:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(port_data,1,1);
     930:	81 e4       	ldi	r24, 0x41	; 65
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	41 e0       	ldi	r20, 0x01	; 1
     936:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(port_data,2,1);
     93a:	81 e4       	ldi	r24, 0x41	; 65
     93c:	62 e0       	ldi	r22, 0x02	; 2
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(port_data,3,1);
     944:	81 e4       	ldi	r24, 0x41	; 65
     946:	63 e0       	ldi	r22, 0x03	; 3
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	#else
	DIO_SET_DIR_NIPPLE(port_data,start_pin,0xFF);   //write 0 for low nipple ,write  4 for high nipple 
	#endif
	DIO_SETPINDIR(port_control,RS,1);
     94e:	81 e4       	ldi	r24, 0x41	; 65
     950:	66 e0       	ldi	r22, 0x06	; 6
     952:	41 e0       	ldi	r20, 0x01	; 1
     954:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(port_control,EN,1);
     958:	81 e4       	ldi	r24, 0x41	; 65
     95a:	64 e0       	ldi	r22, 0x04	; 4
     95c:	41 e0       	ldi	r20, 0x01	; 1
     95e:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_SETPINDIR(port_control,R_W,1);
     962:	81 e4       	ldi	r24, 0x41	; 65
     964:	65 e0       	ldi	r22, 0x05	; 5
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
	DIO_WRITE(port_control,R_W,0);
     96c:	81 e4       	ldi	r24, 0x41	; 65
     96e:	65 e0       	ldi	r22, 0x05	; 5
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
	LCD_Return_home();
     976:	0e 94 76 04 	call	0x8ec	; 0x8ec <LCD_Return_home>
	LCD_SEND_CMD(four_bit);
     97a:	88 e2       	ldi	r24, 0x28	; 40
     97c:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
	LCD_SEND_CMD(Display_on_Cursor_on);
     980:	8e e0       	ldi	r24, 0x0E	; 14
     982:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
	LCD_CLEAR_SCREEN();
     986:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
	LCD_SEND_CMD(Entry_Mode);
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
	#endif	
}
     990:	08 95       	ret

00000992 <LCD_SEND_CHAR>:

void LCD_SEND_CHAR (unsigned char data)
{
     992:	cf 93       	push	r28
     994:	c8 2f       	mov	r28, r24
	DIO_WRITE_HIGH_NIBBLE(port_data,data>>4);
	enable();
	DIO_WRITE_HIGH_NIBBLE(port_data,data);
	enable();
	#elif defined LOW_NIPPLE
	DIO_WRITE(port_control,RS,1);
     996:	81 e4       	ldi	r24, 0x41	; 65
     998:	66 e0       	ldi	r22, 0x06	; 6
     99a:	41 e0       	ldi	r20, 0x01	; 1
     99c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
	DIO_WRITE_LOW_NIBBLE(port_data,data>>4);
     9a0:	6c 2f       	mov	r22, r28
     9a2:	62 95       	swap	r22
     9a4:	6f 70       	andi	r22, 0x0F	; 15
     9a6:	81 e4       	ldi	r24, 0x41	; 65
     9a8:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_WRITE_LOW_NIBBLE>
	enable();
     9ac:	0e 94 30 04 	call	0x860	; 0x860 <enable>
	DIO_WRITE_LOW_NIBBLE(port_data,data);
     9b0:	81 e4       	ldi	r24, 0x41	; 65
     9b2:	6c 2f       	mov	r22, r28
     9b4:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_WRITE_LOW_NIBBLE>
	enable();
     9b8:	0e 94 30 04 	call	0x860	; 0x860 <enable>
	DIO_WRITE_NIBBLE(port_data,start_pin,data);
	enable();
	#endif
		
	#endif
}
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <LCD_SEND_STRING>:
	}
	LCD_SEND_CMD(cmd);
}

void LCD_SEND_STRING (const char* ptr)
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ec 01       	movw	r28, r24
	while((*ptr) != '\0')
     9c6:	88 81       	ld	r24, Y
     9c8:	88 23       	and	r24, r24
     9ca:	61 f0       	breq	.+24     	; 0x9e4 <LCD_SEND_STRING+0x24>
		cmd=0XC0+column-1;
	}
	LCD_SEND_CMD(cmd);
}

void LCD_SEND_STRING (const char* ptr)
     9cc:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr) != '\0')
	{
		LCD_SEND_CHAR(*ptr);
     9ce:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
     9d2:	8f ec       	ldi	r24, 0xCF	; 207
     9d4:	97 e0       	ldi	r25, 0x07	; 7
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <LCD_SEND_STRING+0x16>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <LCD_SEND_STRING+0x1c>
     9dc:	00 00       	nop
	LCD_SEND_CMD(cmd);
}

void LCD_SEND_STRING (const char* ptr)
{
	while((*ptr) != '\0')
     9de:	89 91       	ld	r24, Y+
     9e0:	88 23       	and	r24, r24
     9e2:	a9 f7       	brne	.-22     	; 0x9ce <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*ptr);
		ptr++;
		_delay_ms(1);
	}
}	
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <LED_INIT>:
 */ 
#include "DIO.h"
//make the led in this port output pin
void LED_INIT(unsigned char portname,unsigned char pinnumber)
{
	DIO_SETPINDIR(portname,pinnumber,1);
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_SETPINDIR>
}
     9f0:	08 95       	ret

000009f2 <LED_ON>:
//write on this on logic high
void LED_ON(unsigned char portname,unsigned char pinnumber)
{
	DIO_WRITE(portname,pinnumber,1);
     9f2:	41 e0       	ldi	r20, 0x01	; 1
     9f4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
}
     9f8:	08 95       	ret

000009fa <LED_OFF>:
//write on this on logic low
void LED_OFF(unsigned char portname,unsigned char pinnumber)
{
	DIO_WRITE(portname,pinnumber,0);
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_WRITE>
}
     a00:	08 95       	ret

00000a02 <LED_TOGGLE>:
//TOGGLE the output of the led
void LED_TOGGLE(unsigned char portname,unsigned char pinnumber)
{
	DIO_togglepin(portname,pinnumber);
     a02:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_togglepin>
}
     a06:	08 95       	ret

00000a08 <LED_READ_STATUS>:
unsigned char LED_READ_STATUS(unsigned char portname,unsigned char pinnumber)
{
	return DIO_readpin(portname,pinnumber);
     a08:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_readpin>
}
     a0c:	08 95       	ret

00000a0e <LED_set_port_direction>:
void LED_set_port_direction(unsigned char portname,unsigned char direction)
{
	DIO_set_port_direction(portname,direction);
     a0e:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_set_port_direction>
}
     a12:	08 95       	ret

00000a14 <LED_toggle_port>:
void LED_toggle_port(unsigned char portname)
{
	DIO_toggle_port(portname);
     a14:	0e 94 9e 02 	call	0x53c	; 0x53c <DIO_toggle_port>
     a18:	08 95       	ret

00000a1a <main>:
#define EEPROM_PASSWORD_LOCATION2 0X21
#define EEPROM_PASSWORD_LOCATION3 0X22
#define EEPROM_PASSWORD_LOCATION4 0X23
unsigned char x,i,arr[4],max_trials=3,counter,flag=0;
int main(void)
{
     a1a:	4f 92       	push	r4
     a1c:	5f 92       	push	r5
     a1e:	6f 92       	push	r6
     a20:	7f 92       	push	r7
     a22:	8f 92       	push	r8
     a24:	9f 92       	push	r9
     a26:	af 92       	push	r10
     a28:	bf 92       	push	r11
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
	
	LCD_INIT();
     a3a:	0e 94 8a 04 	call	0x914	; 0x914 <LCD_INIT>
	keybad_init();
     a3e:	0e 94 9c 03 	call	0x738	; 0x738 <keybad_init>
	LED_INIT('b',1);
     a42:	82 e6       	ldi	r24, 0x62	; 98
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LED_INIT>
	LED_INIT('b',2);
     a4a:	82 e6       	ldi	r24, 0x62	; 98
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LED_INIT>
	buzzer_INIT('b',0);
     a52:	82 e6       	ldi	r24, 0x62	; 98
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	0e 94 49 00 	call	0x92	; 0x92 <buzzer_INIT>
	if(EEPROM_READ(EEPROM_STATUS) != 1)
     a5a:	89 e1       	ldi	r24, 0x19	; 25
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_READ>
     a62:	81 30       	cpi	r24, 0x01	; 1
     a64:	09 f4       	brne	.+2      	; 0xa68 <main+0x4e>
     a66:	72 c0       	rjmp	.+228    	; 0xb4c <main+0x132>
	{
	lCD_MOVE_CURSOR(1,3);
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	63 e0       	ldi	r22, 0x03	; 3
     a6c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
	LCD_SEND_STRING("SAFE PROJECT");
     a70:	80 e7       	ldi	r24, 0x70	; 112
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	99 e6       	ldi	r25, 0x69	; 105
     a7c:	a8 e1       	ldi	r26, 0x18	; 24
     a7e:	81 50       	subi	r24, 0x01	; 1
     a80:	90 40       	sbci	r25, 0x00	; 0
     a82:	a0 40       	sbci	r26, 0x00	; 0
     a84:	e1 f7       	brne	.-8      	; 0xa7e <main+0x64>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <main+0x6e>
     a88:	00 00       	nop
	_delay_ms(1000);
	LCD_CLEAR_SCREEN();
     a8a:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
	LCD_SEND_STRING("Set the password:");
     a8e:	8d e7       	ldi	r24, 0x7D	; 125
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
	lCD_MOVE_CURSOR(2,1);
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
	
	while(counter<4)
     a9e:	80 91 85 01 	lds	r24, 0x0185
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	e0 f5       	brcc	.+120    	; 0xb1e <main+0x104>
	{
		x=keybad_check_press();
     aa6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <keybad_check_press>
     aaa:	80 93 84 01 	sts	0x0184, r24
		if(x != 0xff)
     aae:	8f 3f       	cpi	r24, 0xFF	; 255
     ab0:	49 f1       	breq	.+82     	; 0xb04 <main+0xea>
     ab2:	8f e7       	ldi	r24, 0x7F	; 127
     ab4:	98 e3       	ldi	r25, 0x38	; 56
     ab6:	a1 e0       	ldi	r26, 0x01	; 1
     ab8:	81 50       	subi	r24, 0x01	; 1
     aba:	90 40       	sbci	r25, 0x00	; 0
     abc:	a0 40       	sbci	r26, 0x00	; 0
     abe:	e1 f7       	brne	.-8      	; 0xab8 <main+0x9e>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <main+0xa8>
     ac2:	00 00       	nop
		{
				_delay_ms(50);
				LCD_SEND_CHAR(x);
     ac4:	80 91 84 01 	lds	r24, 0x0184
     ac8:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	91 ee       	ldi	r25, 0xE1	; 225
     ad0:	a4 e0       	ldi	r26, 0x04	; 4
     ad2:	81 50       	subi	r24, 0x01	; 1
     ad4:	90 40       	sbci	r25, 0x00	; 0
     ad6:	a0 40       	sbci	r26, 0x00	; 0
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <main+0xb8>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <main+0xc2>
     adc:	00 00       	nop
				_delay_ms(200);
				LCD_SEND_CMD(0X10);
     ade:	80 e1       	ldi	r24, 0x10	; 16
     ae0:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
				LCD_SEND_CHAR(0X2A);
     ae4:	8a e2       	ldi	r24, 0x2A	; 42
     ae6:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
				EEPROM_WRITE(EEPROM_PASSWORD_LOCATION1+counter,x);
     aea:	80 91 85 01 	lds	r24, 0x0185
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	80 96       	adiw	r24, 0x20	; 32
     af2:	60 91 84 01 	lds	r22, 0x0184
     af6:	0e 94 8f 03 	call	0x71e	; 0x71e <EEPROM_WRITE>
				counter++;
     afa:	80 91 85 01 	lds	r24, 0x0185
     afe:	8f 5f       	subi	r24, 0xFF	; 255
     b00:	80 93 85 01 	sts	0x0185, r24
     b04:	8f e7       	ldi	r24, 0x7F	; 127
     b06:	99 ea       	ldi	r25, 0xA9	; 169
     b08:	a3 e0       	ldi	r26, 0x03	; 3
     b0a:	81 50       	subi	r24, 0x01	; 1
     b0c:	90 40       	sbci	r25, 0x00	; 0
     b0e:	a0 40       	sbci	r26, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <main+0xf0>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <main+0xfa>
     b14:	00 00       	nop
	_delay_ms(1000);
	LCD_CLEAR_SCREEN();
	LCD_SEND_STRING("Set the password:");
	lCD_MOVE_CURSOR(2,1);
	
	while(counter<4)
     b16:	80 91 85 01 	lds	r24, 0x0185
     b1a:	84 30       	cpi	r24, 0x04	; 4
     b1c:	20 f2       	brcs	.-120    	; 0xaa6 <main+0x8c>
				EEPROM_WRITE(EEPROM_PASSWORD_LOCATION1+counter,x);
				counter++;
		}
		_delay_ms(150);	
	}
	EEPROM_WRITE(EEPROM_STATUS,1);
     b1e:	89 e1       	ldi	r24, 0x19	; 25
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	0e 94 8f 03 	call	0x71e	; 0x71e <EEPROM_WRITE>
	LCD_CLEAR_SCREEN();
     b28:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
	LCD_SEND_STRING("password saved!!");
     b2c:	8f e8       	ldi	r24, 0x8F	; 143
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	99 e6       	ldi	r25, 0x69	; 105
     b38:	a8 e1       	ldi	r26, 0x18	; 24
     b3a:	81 50       	subi	r24, 0x01	; 1
     b3c:	90 40       	sbci	r25, 0x00	; 0
     b3e:	a0 40       	sbci	r26, 0x00	; 0
     b40:	e1 f7       	brne	.-8      	; 0xb3a <main+0x120>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <main+0x12a>
     b44:	00 00       	nop
	_delay_ms(1000);
	LCD_CLEAR_SCREEN();
     b46:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
     b4a:	1e c2       	rjmp	.+1084   	; 0xf88 <main+0x56e>
	}	
	else
	{
	LCD_CLEAR_SCREEN();
     b4c:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
	LCD_SEND_STRING("1/check password");
     b50:	80 ea       	ldi	r24, 0xA0	; 160
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
	lCD_MOVE_CURSOR(2,1);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
	LCD_SEND_STRING("2/edit password");
     b60:	81 eb       	ldi	r24, 0xB1	; 177
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	93 ed       	ldi	r25, 0xD3	; 211
     b6c:	a0 e3       	ldi	r26, 0x30	; 48
     b6e:	81 50       	subi	r24, 0x01	; 1
     b70:	90 40       	sbci	r25, 0x00	; 0
     b72:	a0 40       	sbci	r26, 0x00	; 0
     b74:	e1 f7       	brne	.-8      	; 0xb6e <main+0x154>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <main+0x15e>
     b78:	00 00       	nop
	_delay_ms(2000);
	LCD_CLEAR_SCREEN();
     b7a:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
	LCD_SEND_STRING("1 or 2:");
     b7e:	81 ec       	ldi	r24, 0xC1	; 193
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
	x=0xff;
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	80 93 84 01 	sts	0x0184, r24
	do 
	{
		x=keybad_check_press();
     b8c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <keybad_check_press>
     b90:	80 93 84 01 	sts	0x0184, r24
	} while (x == 0xff);
     b94:	8f 3f       	cpi	r24, 0xFF	; 255
     b96:	d1 f3       	breq	.-12     	; 0xb8c <main+0x172>
	LCD_SEND_CHAR(x);
     b98:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	99 e6       	ldi	r25, 0x69	; 105
     ba0:	a8 e1       	ldi	r26, 0x18	; 24
     ba2:	81 50       	subi	r24, 0x01	; 1
     ba4:	90 40       	sbci	r25, 0x00	; 0
     ba6:	a0 40       	sbci	r26, 0x00	; 0
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <main+0x188>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <main+0x192>
     bac:	00 00       	nop
	_delay_ms(1000);		
		switch(x)
     bae:	80 91 84 01 	lds	r24, 0x0184
     bb2:	81 33       	cpi	r24, 0x31	; 49
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <main+0x19e>
     bb6:	d8 c0       	rjmp	.+432    	; 0xd68 <main+0x34e>
     bb8:	82 33       	cpi	r24, 0x32	; 50
     bba:	09 f0       	breq	.+2      	; 0xbbe <main+0x1a4>
     bbc:	e5 c1       	rjmp	.+970    	; 0xf88 <main+0x56e>
     bbe:	01 c1       	rjmp	.+514    	; 0xdc2 <main+0x3a8>
		{
				case'1':
				while(flag == 0)
				{
				x=0xff;
     bc0:	d0 93 84 01 	sts	0x0184, r29
				LCD_CLEAR_SCREEN();
     bc4:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
				LCD_SEND_STRING("check password:");
     bc8:	c8 01       	movw	r24, r16
     bca:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
				lCD_MOVE_CURSOR(2,1);
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
				for(i=0;i<=3;i++)
     bd6:	10 92 7f 01 	sts	0x017F, r1
				{
					do
					{
						x=keybad_check_press();
     bda:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <keybad_check_press>
     bde:	28 2f       	mov	r18, r24
     be0:	80 93 84 01 	sts	0x0184, r24
						
					} while (x == 0xff);
     be4:	8f 3f       	cpi	r24, 0xFF	; 255
     be6:	c9 f3       	breq	.-14     	; 0xbda <main+0x1c0>
					arr[i]=x;
     be8:	80 91 7f 01 	lds	r24, 0x017F
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	80 58       	subi	r24, 0x80	; 128
     bf0:	9e 4f       	sbci	r25, 0xFE	; 254
     bf2:	dc 01       	movw	r26, r24
     bf4:	2c 93       	st	X, r18
     bf6:	8f e7       	ldi	r24, 0x7F	; 127
     bf8:	98 e3       	ldi	r25, 0x38	; 56
     bfa:	a1 e0       	ldi	r26, 0x01	; 1
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	90 40       	sbci	r25, 0x00	; 0
     c00:	a0 40       	sbci	r26, 0x00	; 0
     c02:	e1 f7       	brne	.-8      	; 0xbfc <main+0x1e2>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <main+0x1ec>
     c06:	00 00       	nop
					_delay_ms(50);
					LCD_SEND_CHAR(x);
     c08:	82 2f       	mov	r24, r18
     c0a:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	94 e3       	ldi	r25, 0x34	; 52
     c12:	ac e0       	ldi	r26, 0x0C	; 12
     c14:	81 50       	subi	r24, 0x01	; 1
     c16:	90 40       	sbci	r25, 0x00	; 0
     c18:	a0 40       	sbci	r26, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <main+0x1fa>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <main+0x204>
     c1e:	00 00       	nop
					_delay_ms(500);
					LCD_SEND_CMD(0X10);
     c20:	80 e1       	ldi	r24, 0x10	; 16
     c22:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
					LCD_SEND_CHAR(0X2A);	
     c26:	8a e2       	ldi	r24, 0x2A	; 42
     c28:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
				{
				x=0xff;
				LCD_CLEAR_SCREEN();
				LCD_SEND_STRING("check password:");
				lCD_MOVE_CURSOR(2,1);
				for(i=0;i<=3;i++)
     c2c:	80 91 7f 01 	lds	r24, 0x017F
     c30:	8f 5f       	subi	r24, 0xFF	; 255
     c32:	80 93 7f 01 	sts	0x017F, r24
     c36:	84 30       	cpi	r24, 0x04	; 4
     c38:	80 f2       	brcs	.-96     	; 0xbda <main+0x1c0>
					_delay_ms(500);
					LCD_SEND_CMD(0X10);
					LCD_SEND_CHAR(0X2A);	
				}
				
			if(arr[0]==EEPROM_READ(EEPROM_PASSWORD_LOCATION1) && arr[1]==EEPROM_READ(EEPROM_PASSWORD_LOCATION2) && arr[2]==EEPROM_READ(EEPROM_PASSWORD_LOCATION3) && arr[3]==EEPROM_READ(EEPROM_PASSWORD_LOCATION4))
     c3a:	d7 01       	movw	r26, r14
     c3c:	cc 91       	ld	r28, X
     c3e:	80 e2       	ldi	r24, 0x20	; 32
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_READ>
     c46:	c8 17       	cp	r28, r24
     c48:	09 f0       	breq	.+2      	; 0xc4c <main+0x232>
     c4a:	40 c0       	rjmp	.+128    	; 0xccc <main+0x2b2>
     c4c:	f2 01       	movw	r30, r4
     c4e:	c0 81       	ld	r28, Z
     c50:	81 e2       	ldi	r24, 0x21	; 33
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_READ>
     c58:	c8 17       	cp	r28, r24
     c5a:	c1 f5       	brne	.+112    	; 0xccc <main+0x2b2>
     c5c:	a2 e8       	ldi	r26, 0x82	; 130
     c5e:	b1 e0       	ldi	r27, 0x01	; 1
     c60:	cc 91       	ld	r28, X
     c62:	82 e2       	ldi	r24, 0x22	; 34
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_READ>
     c6a:	c8 17       	cp	r28, r24
     c6c:	79 f5       	brne	.+94     	; 0xccc <main+0x2b2>
     c6e:	e3 e8       	ldi	r30, 0x83	; 131
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	c0 81       	ld	r28, Z
     c74:	83 e2       	ldi	r24, 0x23	; 35
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_READ>
     c7c:	c8 17       	cp	r28, r24
     c7e:	31 f5       	brne	.+76     	; 0xccc <main+0x2b2>
			{
				LCD_CLEAR_SCREEN();
     c80:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
				LCD_SEND_STRING("Right password");
     c84:	89 ed       	ldi	r24, 0xD9	; 217
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
				lCD_MOVE_CURSOR(2,1);
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
				LCD_SEND_STRING("Safe opened!!");
     c94:	88 ee       	ldi	r24, 0xE8	; 232
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
				LED_ON('b',2);
     c9c:	82 e6       	ldi	r24, 0x62	; 98
     c9e:	62 e0       	ldi	r22, 0x02	; 2
     ca0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LED_ON>
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	93 ed       	ldi	r25, 0xD3	; 211
     ca8:	a0 e3       	ldi	r26, 0x30	; 48
     caa:	81 50       	subi	r24, 0x01	; 1
     cac:	90 40       	sbci	r25, 0x00	; 0
     cae:	a0 40       	sbci	r26, 0x00	; 0
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <main+0x290>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <main+0x29a>
     cb4:	00 00       	nop
				_delay_ms(2000);
				LED_OFF('b',2);
     cb6:	82 e6       	ldi	r24, 0x62	; 98
     cb8:	62 e0       	ldi	r22, 0x02	; 2
     cba:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LED_OFF>
				servo_degree(90);
     cbe:	8a e5       	ldi	r24, 0x5A	; 90
     cc0:	0e 94 d7 07 	call	0xfae	; 0xfae <servo_degree>
				flag =1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 7e 01 	sts	0x017E, r24
     cca:	75 c0       	rjmp	.+234    	; 0xdb6 <main+0x39c>
			}
			else
			{
				LCD_CLEAR_SCREEN();
     ccc:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
				max_trials--;
     cd0:	80 91 7c 01 	lds	r24, 0x017C
     cd4:	81 50       	subi	r24, 0x01	; 1
     cd6:	80 93 7c 01 	sts	0x017C, r24
				if(max_trials != 0)
     cda:	88 23       	and	r24, r24
     cdc:	f1 f0       	breq	.+60     	; 0xd1a <main+0x300>
				{
					
					LCD_SEND_STRING("wrong password");
     cde:	c6 01       	movw	r24, r12
     ce0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
					lCD_MOVE_CURSOR(2,1);
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
					LCD_SEND_STRING("you have ");
     cec:	c4 01       	movw	r24, r8
     cee:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
					LCD_SEND_CHAR(max_trials+48);
     cf2:	80 91 7c 01 	lds	r24, 0x017C
     cf6:	80 5d       	subi	r24, 0xD0	; 208
     cf8:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
					LCD_SEND_STRING("trials only");
     cfc:	c3 01       	movw	r24, r6
     cfe:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	99 e6       	ldi	r25, 0x69	; 105
     d06:	a8 e1       	ldi	r26, 0x18	; 24
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	90 40       	sbci	r25, 0x00	; 0
     d0c:	a0 40       	sbci	r26, 0x00	; 0
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <main+0x2ee>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <main+0x2f8>
     d12:	00 00       	nop
					_delay_ms(1000);
					flag=0;
     d14:	10 92 7e 01 	sts	0x017E, r1
     d18:	4e c0       	rjmp	.+156    	; 0xdb6 <main+0x39c>
				}
				else
				{
					LCD_SEND_STRING("wrong password");
     d1a:	c6 01       	movw	r24, r12
     d1c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
					lCD_MOVE_CURSOR(2,1);
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
					LCD_SEND_STRING("Safe Closed");
     d28:	c5 01       	movw	r24, r10
     d2a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
					flag=1;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 7e 01 	sts	0x017E, r24
					LED_ON('b',1);
     d34:	82 e6       	ldi	r24, 0x62	; 98
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LED_ON>
					buzzer_ON('b',0);
     d3c:	82 e6       	ldi	r24, 0x62	; 98
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	0e 94 4d 00 	call	0x9a	; 0x9a <buzzer_ON>
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	99 e6       	ldi	r25, 0x69	; 105
     d48:	a8 e1       	ldi	r26, 0x18	; 24
     d4a:	81 50       	subi	r24, 0x01	; 1
     d4c:	90 40       	sbci	r25, 0x00	; 0
     d4e:	a0 40       	sbci	r26, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <main+0x330>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <main+0x33a>
     d54:	00 00       	nop
					_delay_ms(1000);
					LED_OFF('b',1);
     d56:	82 e6       	ldi	r24, 0x62	; 98
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LED_OFF>
					buzzer_OFF('b',0);
     d5e:	82 e6       	ldi	r24, 0x62	; 98
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	0e 94 51 00 	call	0xa2	; 0xa2 <buzzer_OFF>
     d66:	27 c0       	rjmp	.+78     	; 0xdb6 <main+0x39c>
		switch(x)
		{
				case'1':
				while(flag == 0)
				{
				x=0xff;
     d68:	df ef       	ldi	r29, 0xFF	; 255
				LCD_CLEAR_SCREEN();
				LCD_SEND_STRING("check password:");
     d6a:	09 ec       	ldi	r16, 0xC9	; 201
     d6c:	10 e0       	ldi	r17, 0x00	; 0
					_delay_ms(500);
					LCD_SEND_CMD(0X10);
					LCD_SEND_CHAR(0X2A);	
				}
				
			if(arr[0]==EEPROM_READ(EEPROM_PASSWORD_LOCATION1) && arr[1]==EEPROM_READ(EEPROM_PASSWORD_LOCATION2) && arr[2]==EEPROM_READ(EEPROM_PASSWORD_LOCATION3) && arr[3]==EEPROM_READ(EEPROM_PASSWORD_LOCATION4))
     d6e:	0f 2e       	mov	r0, r31
     d70:	f0 e8       	ldi	r31, 0x80	; 128
     d72:	ef 2e       	mov	r14, r31
     d74:	f1 e0       	ldi	r31, 0x01	; 1
     d76:	ff 2e       	mov	r15, r31
     d78:	f0 2d       	mov	r31, r0
					_delay_ms(1000);
					flag=0;
				}
				else
				{
					LCD_SEND_STRING("wrong password");
     d7a:	0f 2e       	mov	r0, r31
     d7c:	f6 ef       	ldi	r31, 0xF6	; 246
     d7e:	cf 2e       	mov	r12, r31
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	df 2e       	mov	r13, r31
     d84:	f0 2d       	mov	r31, r0
					lCD_MOVE_CURSOR(2,1);
					LCD_SEND_STRING("Safe Closed");
     d86:	0f 2e       	mov	r0, r31
     d88:	fb e1       	ldi	r31, 0x1B	; 27
     d8a:	af 2e       	mov	r10, r31
     d8c:	f1 e0       	ldi	r31, 0x01	; 1
     d8e:	bf 2e       	mov	r11, r31
     d90:	f0 2d       	mov	r31, r0
				if(max_trials != 0)
				{
					
					LCD_SEND_STRING("wrong password");
					lCD_MOVE_CURSOR(2,1);
					LCD_SEND_STRING("you have ");
     d92:	0f 2e       	mov	r0, r31
     d94:	f5 e0       	ldi	r31, 0x05	; 5
     d96:	8f 2e       	mov	r8, r31
     d98:	f1 e0       	ldi	r31, 0x01	; 1
     d9a:	9f 2e       	mov	r9, r31
     d9c:	f0 2d       	mov	r31, r0
					LCD_SEND_CHAR(max_trials+48);
					LCD_SEND_STRING("trials only");
     d9e:	0f 2e       	mov	r0, r31
     da0:	ff e0       	ldi	r31, 0x0F	; 15
     da2:	6f 2e       	mov	r6, r31
     da4:	f1 e0       	ldi	r31, 0x01	; 1
     da6:	7f 2e       	mov	r7, r31
     da8:	f0 2d       	mov	r31, r0
					_delay_ms(500);
					LCD_SEND_CMD(0X10);
					LCD_SEND_CHAR(0X2A);	
				}
				
			if(arr[0]==EEPROM_READ(EEPROM_PASSWORD_LOCATION1) && arr[1]==EEPROM_READ(EEPROM_PASSWORD_LOCATION2) && arr[2]==EEPROM_READ(EEPROM_PASSWORD_LOCATION3) && arr[3]==EEPROM_READ(EEPROM_PASSWORD_LOCATION4))
     daa:	0f 2e       	mov	r0, r31
     dac:	f1 e8       	ldi	r31, 0x81	; 129
     dae:	4f 2e       	mov	r4, r31
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	5f 2e       	mov	r5, r31
     db4:	f0 2d       	mov	r31, r0
	LCD_SEND_CHAR(x);
	_delay_ms(1000);		
		switch(x)
		{
				case'1':
				while(flag == 0)
     db6:	80 91 7e 01 	lds	r24, 0x017E
     dba:	88 23       	and	r24, r24
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <main+0x3a6>
     dbe:	00 cf       	rjmp	.-512    	; 0xbc0 <main+0x1a6>
     dc0:	e3 c0       	rjmp	.+454    	; 0xf88 <main+0x56e>
				}
			}
				}	
				break;		
			case'2':
				LCD_CLEAR_SCREEN();
     dc2:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
				LCD_SEND_STRING("Enter Password:");
     dc6:	87 e2       	ldi	r24, 0x27	; 39
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
				lCD_MOVE_CURSOR(2,1);
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
				for(i=0;i<=3;i++)
     dd6:	10 92 7f 01 	sts	0x017F, r1
				{
					do
					{
						x=keybad_check_press();
     dda:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <keybad_check_press>
     dde:	80 93 84 01 	sts	0x0184, r24
						
					} while (x == 0xff);
     de2:	8f 3f       	cpi	r24, 0xFF	; 255
     de4:	d1 f3       	breq	.-12     	; 0xdda <main+0x3c0>
					arr[i]=x;
     de6:	e0 91 7f 01 	lds	r30, 0x017F
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	e0 58       	subi	r30, 0x80	; 128
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	80 83       	st	Z, r24
     df2:	8f e7       	ldi	r24, 0x7F	; 127
     df4:	98 e3       	ldi	r25, 0x38	; 56
     df6:	a1 e0       	ldi	r26, 0x01	; 1
     df8:	81 50       	subi	r24, 0x01	; 1
     dfa:	90 40       	sbci	r25, 0x00	; 0
     dfc:	a0 40       	sbci	r26, 0x00	; 0
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <main+0x3de>
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <main+0x3e8>
     e02:	00 00       	nop
					_delay_ms(50);
					LCD_SEND_CHAR(x);
     e04:	80 91 84 01 	lds	r24, 0x0184
     e08:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	94 e3       	ldi	r25, 0x34	; 52
     e10:	ac e0       	ldi	r26, 0x0C	; 12
     e12:	81 50       	subi	r24, 0x01	; 1
     e14:	90 40       	sbci	r25, 0x00	; 0
     e16:	a0 40       	sbci	r26, 0x00	; 0
     e18:	e1 f7       	brne	.-8      	; 0xe12 <main+0x3f8>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <main+0x402>
     e1c:	00 00       	nop
					_delay_ms(500);
					LCD_SEND_CMD(0X10);
     e1e:	80 e1       	ldi	r24, 0x10	; 16
     e20:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
					LCD_SEND_CHAR(0X2A);
     e24:	8a e2       	ldi	r24, 0x2A	; 42
     e26:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
				break;		
			case'2':
				LCD_CLEAR_SCREEN();
				LCD_SEND_STRING("Enter Password:");
				lCD_MOVE_CURSOR(2,1);
				for(i=0;i<=3;i++)
     e2a:	80 91 7f 01 	lds	r24, 0x017F
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	80 93 7f 01 	sts	0x017F, r24
     e34:	84 30       	cpi	r24, 0x04	; 4
     e36:	88 f2       	brcs	.-94     	; 0xdda <main+0x3c0>
					_delay_ms(500);
					LCD_SEND_CMD(0X10);
					LCD_SEND_CHAR(0X2A);
				}
				
				if(arr[0]==EEPROM_READ(EEPROM_PASSWORD_LOCATION1) && arr[1]==EEPROM_READ(EEPROM_PASSWORD_LOCATION2) && arr[2]==EEPROM_READ(EEPROM_PASSWORD_LOCATION3) && arr[3]==EEPROM_READ(EEPROM_PASSWORD_LOCATION4))
     e38:	c0 91 80 01 	lds	r28, 0x0180
     e3c:	80 e2       	ldi	r24, 0x20	; 32
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_READ>
     e44:	c8 17       	cp	r28, r24
     e46:	09 f0       	breq	.+2      	; 0xe4a <main+0x430>
     e48:	77 c0       	rjmp	.+238    	; 0xf38 <main+0x51e>
     e4a:	c0 91 81 01 	lds	r28, 0x0181
     e4e:	81 e2       	ldi	r24, 0x21	; 33
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_READ>
     e56:	c8 17       	cp	r28, r24
     e58:	09 f0       	breq	.+2      	; 0xe5c <main+0x442>
     e5a:	6e c0       	rjmp	.+220    	; 0xf38 <main+0x51e>
     e5c:	c0 91 82 01 	lds	r28, 0x0182
     e60:	82 e2       	ldi	r24, 0x22	; 34
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_READ>
     e68:	c8 17       	cp	r28, r24
     e6a:	09 f0       	breq	.+2      	; 0xe6e <main+0x454>
     e6c:	65 c0       	rjmp	.+202    	; 0xf38 <main+0x51e>
     e6e:	c0 91 83 01 	lds	r28, 0x0183
     e72:	83 e2       	ldi	r24, 0x23	; 35
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_READ>
     e7a:	c8 17       	cp	r28, r24
     e7c:	09 f0       	breq	.+2      	; 0xe80 <main+0x466>
     e7e:	5c c0       	rjmp	.+184    	; 0xf38 <main+0x51e>
				{
					LCD_CLEAR_SCREEN();
     e80:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
					LCD_SEND_STRING("Right password");
     e84:	89 ed       	ldi	r24, 0xD9	; 217
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	99 e6       	ldi	r25, 0x69	; 105
     e90:	a8 e1       	ldi	r26, 0x18	; 24
     e92:	81 50       	subi	r24, 0x01	; 1
     e94:	90 40       	sbci	r25, 0x00	; 0
     e96:	a0 40       	sbci	r26, 0x00	; 0
     e98:	e1 f7       	brne	.-8      	; 0xe92 <main+0x478>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <main+0x482>
     e9c:	00 00       	nop
					_delay_ms(1000);
					LCD_CLEAR_SCREEN();
     e9e:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
					LCD_SEND_STRING("EnterNewPassword:");
     ea2:	87 e3       	ldi	r24, 0x37	; 55
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
					lCD_MOVE_CURSOR(2,1);
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
					for(i=0;i<=3;i++)
     eb2:	10 92 7f 01 	sts	0x017F, r1
					{
						do 
						{
							x=keybad_check_press();
     eb6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <keybad_check_press>
     eba:	80 93 84 01 	sts	0x0184, r24
						} while (x == 0xff);
     ebe:	8f 3f       	cpi	r24, 0xFF	; 255
     ec0:	d1 f3       	breq	.-12     	; 0xeb6 <main+0x49c>
     ec2:	8f e7       	ldi	r24, 0x7F	; 127
     ec4:	98 e3       	ldi	r25, 0x38	; 56
     ec6:	a1 e0       	ldi	r26, 0x01	; 1
     ec8:	81 50       	subi	r24, 0x01	; 1
     eca:	90 40       	sbci	r25, 0x00	; 0
     ecc:	a0 40       	sbci	r26, 0x00	; 0
     ece:	e1 f7       	brne	.-8      	; 0xec8 <main+0x4ae>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <main+0x4b8>
     ed2:	00 00       	nop
						_delay_ms(50);
						LCD_SEND_CHAR(x);
     ed4:	80 91 84 01 	lds	r24, 0x0184
     ed8:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	94 e3       	ldi	r25, 0x34	; 52
     ee0:	ac e0       	ldi	r26, 0x0C	; 12
     ee2:	81 50       	subi	r24, 0x01	; 1
     ee4:	90 40       	sbci	r25, 0x00	; 0
     ee6:	a0 40       	sbci	r26, 0x00	; 0
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <main+0x4c8>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <main+0x4d2>
     eec:	00 00       	nop
						_delay_ms(500);
						LCD_SEND_CMD(0X10);
     eee:	80 e1       	ldi	r24, 0x10	; 16
     ef0:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SEND_CMD>
						LCD_SEND_CHAR(0X2A);
     ef4:	8a e2       	ldi	r24, 0x2A	; 42
     ef6:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_SEND_CHAR>
						EEPROM_WRITE(EEPROM_PASSWORD_LOCATION1+i,x);	   
     efa:	80 91 7f 01 	lds	r24, 0x017F
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	80 96       	adiw	r24, 0x20	; 32
     f02:	60 91 84 01 	lds	r22, 0x0184
     f06:	0e 94 8f 03 	call	0x71e	; 0x71e <EEPROM_WRITE>
					LCD_SEND_STRING("Right password");
					_delay_ms(1000);
					LCD_CLEAR_SCREEN();
					LCD_SEND_STRING("EnterNewPassword:");
					lCD_MOVE_CURSOR(2,1);
					for(i=0;i<=3;i++)
     f0a:	80 91 7f 01 	lds	r24, 0x017F
     f0e:	8f 5f       	subi	r24, 0xFF	; 255
     f10:	80 93 7f 01 	sts	0x017F, r24
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	78 f2       	brcs	.-98     	; 0xeb6 <main+0x49c>
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	99 e6       	ldi	r25, 0x69	; 105
     f1c:	a8 e1       	ldi	r26, 0x18	; 24
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	90 40       	sbci	r25, 0x00	; 0
     f22:	a0 40       	sbci	r26, 0x00	; 0
     f24:	e1 f7       	brne	.-8      	; 0xf1e <main+0x504>
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <main+0x50e>
     f28:	00 00       	nop
						LCD_SEND_CMD(0X10);
						LCD_SEND_CHAR(0X2A);
						EEPROM_WRITE(EEPROM_PASSWORD_LOCATION1+i,x);	   
					}
					_delay_ms(1000);
					LCD_CLEAR_SCREEN();
     f2a:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
					LCD_SEND_STRING("Password saved!!");
     f2e:	89 e4       	ldi	r24, 0x49	; 73
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
     f36:	28 c0       	rjmp	.+80     	; 0xf88 <main+0x56e>
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	99 e6       	ldi	r25, 0x69	; 105
     f3c:	a8 e1       	ldi	r26, 0x18	; 24
     f3e:	81 50       	subi	r24, 0x01	; 1
     f40:	90 40       	sbci	r25, 0x00	; 0
     f42:	a0 40       	sbci	r26, 0x00	; 0
     f44:	e1 f7       	brne	.-8      	; 0xf3e <main+0x524>
     f46:	00 c0       	rjmp	.+0      	; 0xf48 <main+0x52e>
     f48:	00 00       	nop
				}				
				else
				{
					_delay_ms(1000);
					LCD_CLEAR_SCREEN();
     f4a:	0e 94 80 04 	call	0x900	; 0x900 <LCD_CLEAR_SCREEN>
					LCD_SEND_STRING("Wrong password!!");
     f4e:	8a e5       	ldi	r24, 0x5A	; 90
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
					lCD_MOVE_CURSOR(2,1);
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <lCD_MOVE_CURSOR>
					LCD_SEND_STRING("Cant change it..");
     f5e:	8b e6       	ldi	r24, 0x6B	; 107
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LCD_SEND_STRING>
					LED_ON('b',1);
     f66:	82 e6       	ldi	r24, 0x62	; 98
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LED_ON>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	99 e6       	ldi	r25, 0x69	; 105
     f72:	a8 e1       	ldi	r26, 0x18	; 24
     f74:	81 50       	subi	r24, 0x01	; 1
     f76:	90 40       	sbci	r25, 0x00	; 0
     f78:	a0 40       	sbci	r26, 0x00	; 0
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <main+0x55a>
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <main+0x564>
     f7e:	00 00       	nop
					_delay_ms(1000);
					LED_OFF('b',1);
     f80:	82 e6       	ldi	r24, 0x62	; 98
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LED_OFF>
			
			break;
			
		}	
				} 
}
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	9f 90       	pop	r9
     fa2:	8f 90       	pop	r8
     fa4:	7f 90       	pop	r7
     fa6:	6f 90       	pop	r6
     fa8:	5f 90       	pop	r5
     faa:	4f 90       	pop	r4
     fac:	08 95       	ret

00000fae <servo_degree>:
	{
		value=((0.5/90)*(90+degree))+1;
	}
	else if(0<=degree<=90)
	{
		value=((0.5/90)*degree)+1.5;
     fae:	68 2f       	mov	r22, r24
     fb0:	77 27       	eor	r23, r23
     fb2:	67 fd       	sbrc	r22, 7
     fb4:	70 95       	com	r23
     fb6:	87 2f       	mov	r24, r23
     fb8:	97 2f       	mov	r25, r23
     fba:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__floatsisf>
     fbe:	21 e6       	ldi	r18, 0x61	; 97
     fc0:	3b e0       	ldi	r19, 0x0B	; 11
     fc2:	46 eb       	ldi	r20, 0xB6	; 182
     fc4:	5b e3       	ldi	r21, 0x3B	; 59
     fc6:	0e 94 8b 09 	call	0x1316	; 0x1316 <__mulsf3>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 ec       	ldi	r20, 0xC0	; 192
     fd0:	5f e3       	ldi	r21, 0x3F	; 63
     fd2:	0e 94 6d 08 	call	0x10da	; 0x10da <__addsf3>
	}
	timer1_wave_fastPWM(value);
     fd6:	0e 94 45 08 	call	0x108a	; 0x108a <timer1_wave_fastPWM>
     fda:	08 95       	ret

00000fdc <timer_CTC_init_interrupt>:
#include "STD_MACROS.h"

void timer_CTC_init_interrupt()
{
	//Select ctc mode
	SET_BIT(TCCR0,WGM01);
     fdc:	83 b7       	in	r24, 0x33	; 51
     fde:	88 60       	ori	r24, 0x08	; 8
     fe0:	83 bf       	out	0x33, r24	; 51
	//select timer clk
	SET_BIT(TCCR0,CS00);
     fe2:	83 b7       	in	r24, 0x33	; 51
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
     fe8:	83 b7       	in	r24, 0x33	; 51
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	83 bf       	out	0x33, r24	; 51
	// load a value in ocr0
	OCR0=80;
     fee:	80 e5       	ldi	r24, 0x50	; 80
     ff0:	8c bf       	out	0x3c, r24	; 60
	//enable interrupt
	sei();
     ff2:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
     ff4:	89 b7       	in	r24, 0x39	; 57
     ff6:	82 60       	ori	r24, 0x02	; 2
     ff8:	89 bf       	out	0x39, r24	; 57
}
     ffa:	08 95       	ret

00000ffc <timer_wave_NPWM>:

//generating signal in oc0 (PB3) pin in CTC mode 
void timer_wave_NPWM (void)
{
	// set OC0 as output pin
	SET_BIT(DDRB,3);
     ffc:	bb 9a       	sbi	0x17, 3	; 23
	// choose CTC mode
	SET_BIT(TCCR0,WGM01);
     ffe:	83 b7       	in	r24, 0x33	; 51
    1000:	88 60       	ori	r24, 0x08	; 8
    1002:	83 bf       	out	0x33, r24	; 51
	//Load value in OCR0
	OCR0=64;
    1004:	80 e4       	ldi	r24, 0x40	; 64
    1006:	8c bf       	out	0x3c, r24	; 60
	// select timer clock
	SET_BIT(TCCR0,CS00);
    1008:	83 b7       	in	r24, 0x33	; 51
    100a:	81 60       	ori	r24, 0x01	; 1
    100c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    100e:	83 b7       	in	r24, 0x33	; 51
    1010:	84 60       	ori	r24, 0x04	; 4
    1012:	83 bf       	out	0x33, r24	; 51
	//toggle OC0 on compare match
	SET_BIT(TCCR0,COM00);
    1014:	83 b7       	in	r24, 0x33	; 51
    1016:	80 61       	ori	r24, 0x10	; 16
    1018:	83 bf       	out	0x33, r24	; 51
}
    101a:	08 95       	ret

0000101c <timer_wave_FASTPWM>:

// generate PWM signal with specific duty cycle
void timer_wave_FASTPWM (void)
{
	// set OC0 as output pin
	SET_BIT(DDRB,3);
    101c:	bb 9a       	sbi	0x17, 3	; 23
	// choose fast PWM mode
	SET_BIT(TCCR0,WGM00);
    101e:	83 b7       	in	r24, 0x33	; 51
    1020:	80 64       	ori	r24, 0x40	; 64
    1022:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
    1024:	83 b7       	in	r24, 0x33	; 51
    1026:	88 60       	ori	r24, 0x08	; 8
    1028:	83 bf       	out	0x33, r24	; 51
	//Load value in OCR0
	OCR0=64;		 //duty cycle=25%
    102a:	80 e4       	ldi	r24, 0x40	; 64
    102c:	8c bf       	out	0x3c, r24	; 60
	// select timer clock, prescalar=1024
	SET_BIT(TCCR0,CS00);
    102e:	83 b7       	in	r24, 0x33	; 51
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1034:	83 b7       	in	r24, 0x33	; 51
    1036:	84 60       	ori	r24, 0x04	; 4
    1038:	83 bf       	out	0x33, r24	; 51
	//choose inverting mode
	SET_BIT(TCCR0,COM00);
    103a:	83 b7       	in	r24, 0x33	; 51
    103c:	80 61       	ori	r24, 0x10	; 16
    103e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1040:	83 b7       	in	r24, 0x33	; 51
    1042:	80 62       	ori	r24, 0x20	; 32
    1044:	83 bf       	out	0x33, r24	; 51
}
    1046:	08 95       	ret

00001048 <timer_wave_phasecorrect_PWM>:

void timer_wave_phasecorrect_PWM (void)
{
	// set OC0 as output pin
	SET_BIT(DDRB,3);
    1048:	bb 9a       	sbi	0x17, 3	; 23
	// choose fast PWM mode
	SET_BIT(TCCR0,WGM00); 
    104a:	83 b7       	in	r24, 0x33	; 51
    104c:	80 64       	ori	r24, 0x40	; 64
    104e:	83 bf       	out	0x33, r24	; 51
	//Load value in OCR0
	OCR0=64;		 //duty cycle=25%
    1050:	80 e4       	ldi	r24, 0x40	; 64
    1052:	8c bf       	out	0x3c, r24	; 60
	//select timer clock, prescalar=1024
	SET_BIT(TCCR0,CS00);
    1054:	83 b7       	in	r24, 0x33	; 51
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    105a:	83 b7       	in	r24, 0x33	; 51
    105c:	84 60       	ori	r24, 0x04	; 4
    105e:	83 bf       	out	0x33, r24	; 51
	//choose mode
	SET_BIT(TCCR0,COM00);
    1060:	83 b7       	in	r24, 0x33	; 51
    1062:	80 61       	ori	r24, 0x10	; 16
    1064:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);	
    1066:	83 b7       	in	r24, 0x33	; 51
    1068:	80 62       	ori	r24, 0x20	; 32
    106a:	83 bf       	out	0x33, r24	; 51
}
    106c:	08 95       	ret

0000106e <timer2_overflow_init_interrupt>:

void timer2_overflow_init_interrupt()
{
	//select timer clk
	SET_BIT(ASSR,AS2);
    106e:	82 b5       	in	r24, 0x22	; 34
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	82 bd       	out	0x22, r24	; 34
	//select prescalar
	SET_BIT(TCCR2,CS20);
    1074:	85 b5       	in	r24, 0x25	; 37
    1076:	81 60       	ori	r24, 0x01	; 1
    1078:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    107a:	85 b5       	in	r24, 0x25	; 37
    107c:	84 60       	ori	r24, 0x04	; 4
    107e:	85 bd       	out	0x25, r24	; 37
	//enable interrupt
	sei();
    1080:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);	
    1082:	89 b7       	in	r24, 0x39	; 57
    1084:	80 64       	ori	r24, 0x40	; 64
    1086:	89 bf       	out	0x39, r24	; 57
}
    1088:	08 95       	ret

0000108a <timer1_wave_fastPWM>:

void timer1_wave_fastPWM(double value)
{
	/* set OC0 as output pin */
	SET_BIT(DDRD,5);
    108a:	8d 9a       	sbi	0x11, 5	; 17
	/* select phase correct PWM mode*/
	SET_BIT(TCCR1A,WGM11);
    108c:	2f b5       	in	r18, 0x2f	; 47
    108e:	22 60       	ori	r18, 0x02	; 2
    1090:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
    1092:	2e b5       	in	r18, 0x2e	; 46
    1094:	28 60       	ori	r18, 0x08	; 8
    1096:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
    1098:	2e b5       	in	r18, 0x2e	; 46
    109a:	20 61       	ori	r18, 0x10	; 16
    109c:	2e bd       	out	0x2e, r18	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
    109e:	2f b5       	in	r18, 0x2f	; 47
    10a0:	20 68       	ori	r18, 0x80	; 128
    10a2:	2f bd       	out	0x2f, r18	; 47
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS11);
    10a4:	2e b5       	in	r18, 0x2e	; 46
    10a6:	22 60       	ori	r18, 0x02	; 2
    10a8:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	ICR1=19999;
    10aa:	2f e1       	ldi	r18, 0x1F	; 31
    10ac:	3e e4       	ldi	r19, 0x4E	; 78
    10ae:	37 bd       	out	0x27, r19	; 39
    10b0:	26 bd       	out	0x26, r18	; 38
	OCR1A=(value*1000)-1;
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	4a e7       	ldi	r20, 0x7A	; 122
    10b8:	54 e4       	ldi	r21, 0x44	; 68
    10ba:	0e 94 8b 09 	call	0x1316	; 0x1316 <__mulsf3>
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e8       	ldi	r20, 0x80	; 128
    10c4:	5f e3       	ldi	r21, 0x3F	; 63
    10c6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__subsf3>
    10ca:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	9b bd       	out	0x2b, r25	; 43
    10d4:	8a bd       	out	0x2a, r24	; 42
    10d6:	08 95       	ret

000010d8 <__subsf3>:
    10d8:	50 58       	subi	r21, 0x80	; 128

000010da <__addsf3>:
    10da:	bb 27       	eor	r27, r27
    10dc:	aa 27       	eor	r26, r26
    10de:	0e d0       	rcall	.+28     	; 0x10fc <__addsf3x>
    10e0:	e0 c0       	rjmp	.+448    	; 0x12a2 <__fp_round>
    10e2:	d1 d0       	rcall	.+418    	; 0x1286 <__fp_pscA>
    10e4:	30 f0       	brcs	.+12     	; 0x10f2 <__addsf3+0x18>
    10e6:	d6 d0       	rcall	.+428    	; 0x1294 <__fp_pscB>
    10e8:	20 f0       	brcs	.+8      	; 0x10f2 <__addsf3+0x18>
    10ea:	31 f4       	brne	.+12     	; 0x10f8 <__addsf3+0x1e>
    10ec:	9f 3f       	cpi	r25, 0xFF	; 255
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__addsf3+0x1a>
    10f0:	1e f4       	brtc	.+6      	; 0x10f8 <__addsf3+0x1e>
    10f2:	c6 c0       	rjmp	.+396    	; 0x1280 <__fp_nan>
    10f4:	0e f4       	brtc	.+2      	; 0x10f8 <__addsf3+0x1e>
    10f6:	e0 95       	com	r30
    10f8:	e7 fb       	bst	r30, 7
    10fa:	bc c0       	rjmp	.+376    	; 0x1274 <__fp_inf>

000010fc <__addsf3x>:
    10fc:	e9 2f       	mov	r30, r25
    10fe:	e2 d0       	rcall	.+452    	; 0x12c4 <__fp_split3>
    1100:	80 f3       	brcs	.-32     	; 0x10e2 <__addsf3+0x8>
    1102:	ba 17       	cp	r27, r26
    1104:	62 07       	cpc	r22, r18
    1106:	73 07       	cpc	r23, r19
    1108:	84 07       	cpc	r24, r20
    110a:	95 07       	cpc	r25, r21
    110c:	18 f0       	brcs	.+6      	; 0x1114 <__addsf3x+0x18>
    110e:	71 f4       	brne	.+28     	; 0x112c <__addsf3x+0x30>
    1110:	9e f5       	brtc	.+102    	; 0x1178 <__addsf3x+0x7c>
    1112:	fa c0       	rjmp	.+500    	; 0x1308 <__fp_zero>
    1114:	0e f4       	brtc	.+2      	; 0x1118 <__addsf3x+0x1c>
    1116:	e0 95       	com	r30
    1118:	0b 2e       	mov	r0, r27
    111a:	ba 2f       	mov	r27, r26
    111c:	a0 2d       	mov	r26, r0
    111e:	0b 01       	movw	r0, r22
    1120:	b9 01       	movw	r22, r18
    1122:	90 01       	movw	r18, r0
    1124:	0c 01       	movw	r0, r24
    1126:	ca 01       	movw	r24, r20
    1128:	a0 01       	movw	r20, r0
    112a:	11 24       	eor	r1, r1
    112c:	ff 27       	eor	r31, r31
    112e:	59 1b       	sub	r21, r25
    1130:	99 f0       	breq	.+38     	; 0x1158 <__addsf3x+0x5c>
    1132:	59 3f       	cpi	r21, 0xF9	; 249
    1134:	50 f4       	brcc	.+20     	; 0x114a <__addsf3x+0x4e>
    1136:	50 3e       	cpi	r21, 0xE0	; 224
    1138:	68 f1       	brcs	.+90     	; 0x1194 <__addsf3x+0x98>
    113a:	1a 16       	cp	r1, r26
    113c:	f0 40       	sbci	r31, 0x00	; 0
    113e:	a2 2f       	mov	r26, r18
    1140:	23 2f       	mov	r18, r19
    1142:	34 2f       	mov	r19, r20
    1144:	44 27       	eor	r20, r20
    1146:	58 5f       	subi	r21, 0xF8	; 248
    1148:	f3 cf       	rjmp	.-26     	; 0x1130 <__addsf3x+0x34>
    114a:	46 95       	lsr	r20
    114c:	37 95       	ror	r19
    114e:	27 95       	ror	r18
    1150:	a7 95       	ror	r26
    1152:	f0 40       	sbci	r31, 0x00	; 0
    1154:	53 95       	inc	r21
    1156:	c9 f7       	brne	.-14     	; 0x114a <__addsf3x+0x4e>
    1158:	7e f4       	brtc	.+30     	; 0x1178 <__addsf3x+0x7c>
    115a:	1f 16       	cp	r1, r31
    115c:	ba 0b       	sbc	r27, r26
    115e:	62 0b       	sbc	r22, r18
    1160:	73 0b       	sbc	r23, r19
    1162:	84 0b       	sbc	r24, r20
    1164:	ba f0       	brmi	.+46     	; 0x1194 <__addsf3x+0x98>
    1166:	91 50       	subi	r25, 0x01	; 1
    1168:	a1 f0       	breq	.+40     	; 0x1192 <__addsf3x+0x96>
    116a:	ff 0f       	add	r31, r31
    116c:	bb 1f       	adc	r27, r27
    116e:	66 1f       	adc	r22, r22
    1170:	77 1f       	adc	r23, r23
    1172:	88 1f       	adc	r24, r24
    1174:	c2 f7       	brpl	.-16     	; 0x1166 <__addsf3x+0x6a>
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <__addsf3x+0x98>
    1178:	ba 0f       	add	r27, r26
    117a:	62 1f       	adc	r22, r18
    117c:	73 1f       	adc	r23, r19
    117e:	84 1f       	adc	r24, r20
    1180:	48 f4       	brcc	.+18     	; 0x1194 <__addsf3x+0x98>
    1182:	87 95       	ror	r24
    1184:	77 95       	ror	r23
    1186:	67 95       	ror	r22
    1188:	b7 95       	ror	r27
    118a:	f7 95       	ror	r31
    118c:	9e 3f       	cpi	r25, 0xFE	; 254
    118e:	08 f0       	brcs	.+2      	; 0x1192 <__addsf3x+0x96>
    1190:	b3 cf       	rjmp	.-154    	; 0x10f8 <__addsf3+0x1e>
    1192:	93 95       	inc	r25
    1194:	88 0f       	add	r24, r24
    1196:	08 f0       	brcs	.+2      	; 0x119a <__addsf3x+0x9e>
    1198:	99 27       	eor	r25, r25
    119a:	ee 0f       	add	r30, r30
    119c:	97 95       	ror	r25
    119e:	87 95       	ror	r24
    11a0:	08 95       	ret

000011a2 <__fixunssfsi>:
    11a2:	98 d0       	rcall	.+304    	; 0x12d4 <__fp_splitA>
    11a4:	88 f0       	brcs	.+34     	; 0x11c8 <__fixunssfsi+0x26>
    11a6:	9f 57       	subi	r25, 0x7F	; 127
    11a8:	90 f0       	brcs	.+36     	; 0x11ce <__fixunssfsi+0x2c>
    11aa:	b9 2f       	mov	r27, r25
    11ac:	99 27       	eor	r25, r25
    11ae:	b7 51       	subi	r27, 0x17	; 23
    11b0:	a0 f0       	brcs	.+40     	; 0x11da <__fixunssfsi+0x38>
    11b2:	d1 f0       	breq	.+52     	; 0x11e8 <__fixunssfsi+0x46>
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	88 1f       	adc	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	1a f0       	brmi	.+6      	; 0x11c4 <__fixunssfsi+0x22>
    11be:	ba 95       	dec	r27
    11c0:	c9 f7       	brne	.-14     	; 0x11b4 <__fixunssfsi+0x12>
    11c2:	12 c0       	rjmp	.+36     	; 0x11e8 <__fixunssfsi+0x46>
    11c4:	b1 30       	cpi	r27, 0x01	; 1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <__fixunssfsi+0x46>
    11c8:	9f d0       	rcall	.+318    	; 0x1308 <__fp_zero>
    11ca:	b1 e0       	ldi	r27, 0x01	; 1
    11cc:	08 95       	ret
    11ce:	9c c0       	rjmp	.+312    	; 0x1308 <__fp_zero>
    11d0:	67 2f       	mov	r22, r23
    11d2:	78 2f       	mov	r23, r24
    11d4:	88 27       	eor	r24, r24
    11d6:	b8 5f       	subi	r27, 0xF8	; 248
    11d8:	39 f0       	breq	.+14     	; 0x11e8 <__fixunssfsi+0x46>
    11da:	b9 3f       	cpi	r27, 0xF9	; 249
    11dc:	cc f3       	brlt	.-14     	; 0x11d0 <__fixunssfsi+0x2e>
    11de:	86 95       	lsr	r24
    11e0:	77 95       	ror	r23
    11e2:	67 95       	ror	r22
    11e4:	b3 95       	inc	r27
    11e6:	d9 f7       	brne	.-10     	; 0x11de <__fixunssfsi+0x3c>
    11e8:	3e f4       	brtc	.+14     	; 0x11f8 <__fixunssfsi+0x56>
    11ea:	90 95       	com	r25
    11ec:	80 95       	com	r24
    11ee:	70 95       	com	r23
    11f0:	61 95       	neg	r22
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	8f 4f       	sbci	r24, 0xFF	; 255
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <__floatunsisf>:
    11fa:	e8 94       	clt
    11fc:	09 c0       	rjmp	.+18     	; 0x1210 <__floatsisf+0x12>

000011fe <__floatsisf>:
    11fe:	97 fb       	bst	r25, 7
    1200:	3e f4       	brtc	.+14     	; 0x1210 <__floatsisf+0x12>
    1202:	90 95       	com	r25
    1204:	80 95       	com	r24
    1206:	70 95       	com	r23
    1208:	61 95       	neg	r22
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	8f 4f       	sbci	r24, 0xFF	; 255
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	99 23       	and	r25, r25
    1212:	a9 f0       	breq	.+42     	; 0x123e <__floatsisf+0x40>
    1214:	f9 2f       	mov	r31, r25
    1216:	96 e9       	ldi	r25, 0x96	; 150
    1218:	bb 27       	eor	r27, r27
    121a:	93 95       	inc	r25
    121c:	f6 95       	lsr	r31
    121e:	87 95       	ror	r24
    1220:	77 95       	ror	r23
    1222:	67 95       	ror	r22
    1224:	b7 95       	ror	r27
    1226:	f1 11       	cpse	r31, r1
    1228:	f8 cf       	rjmp	.-16     	; 0x121a <__floatsisf+0x1c>
    122a:	fa f4       	brpl	.+62     	; 0x126a <__floatsisf+0x6c>
    122c:	bb 0f       	add	r27, r27
    122e:	11 f4       	brne	.+4      	; 0x1234 <__floatsisf+0x36>
    1230:	60 ff       	sbrs	r22, 0
    1232:	1b c0       	rjmp	.+54     	; 0x126a <__floatsisf+0x6c>
    1234:	6f 5f       	subi	r22, 0xFF	; 255
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	16 c0       	rjmp	.+44     	; 0x126a <__floatsisf+0x6c>
    123e:	88 23       	and	r24, r24
    1240:	11 f0       	breq	.+4      	; 0x1246 <__floatsisf+0x48>
    1242:	96 e9       	ldi	r25, 0x96	; 150
    1244:	11 c0       	rjmp	.+34     	; 0x1268 <__floatsisf+0x6a>
    1246:	77 23       	and	r23, r23
    1248:	21 f0       	breq	.+8      	; 0x1252 <__floatsisf+0x54>
    124a:	9e e8       	ldi	r25, 0x8E	; 142
    124c:	87 2f       	mov	r24, r23
    124e:	76 2f       	mov	r23, r22
    1250:	05 c0       	rjmp	.+10     	; 0x125c <__floatsisf+0x5e>
    1252:	66 23       	and	r22, r22
    1254:	71 f0       	breq	.+28     	; 0x1272 <__floatsisf+0x74>
    1256:	96 e8       	ldi	r25, 0x86	; 134
    1258:	86 2f       	mov	r24, r22
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	2a f0       	brmi	.+10     	; 0x126a <__floatsisf+0x6c>
    1260:	9a 95       	dec	r25
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	da f7       	brpl	.-10     	; 0x1260 <__floatsisf+0x62>
    126a:	88 0f       	add	r24, r24
    126c:	96 95       	lsr	r25
    126e:	87 95       	ror	r24
    1270:	97 f9       	bld	r25, 7
    1272:	08 95       	ret

00001274 <__fp_inf>:
    1274:	97 f9       	bld	r25, 7
    1276:	9f 67       	ori	r25, 0x7F	; 127
    1278:	80 e8       	ldi	r24, 0x80	; 128
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	08 95       	ret

00001280 <__fp_nan>:
    1280:	9f ef       	ldi	r25, 0xFF	; 255
    1282:	80 ec       	ldi	r24, 0xC0	; 192
    1284:	08 95       	ret

00001286 <__fp_pscA>:
    1286:	00 24       	eor	r0, r0
    1288:	0a 94       	dec	r0
    128a:	16 16       	cp	r1, r22
    128c:	17 06       	cpc	r1, r23
    128e:	18 06       	cpc	r1, r24
    1290:	09 06       	cpc	r0, r25
    1292:	08 95       	ret

00001294 <__fp_pscB>:
    1294:	00 24       	eor	r0, r0
    1296:	0a 94       	dec	r0
    1298:	12 16       	cp	r1, r18
    129a:	13 06       	cpc	r1, r19
    129c:	14 06       	cpc	r1, r20
    129e:	05 06       	cpc	r0, r21
    12a0:	08 95       	ret

000012a2 <__fp_round>:
    12a2:	09 2e       	mov	r0, r25
    12a4:	03 94       	inc	r0
    12a6:	00 0c       	add	r0, r0
    12a8:	11 f4       	brne	.+4      	; 0x12ae <__fp_round+0xc>
    12aa:	88 23       	and	r24, r24
    12ac:	52 f0       	brmi	.+20     	; 0x12c2 <__fp_round+0x20>
    12ae:	bb 0f       	add	r27, r27
    12b0:	40 f4       	brcc	.+16     	; 0x12c2 <__fp_round+0x20>
    12b2:	bf 2b       	or	r27, r31
    12b4:	11 f4       	brne	.+4      	; 0x12ba <__fp_round+0x18>
    12b6:	60 ff       	sbrs	r22, 0
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <__fp_round+0x20>
    12ba:	6f 5f       	subi	r22, 0xFF	; 255
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	8f 4f       	sbci	r24, 0xFF	; 255
    12c0:	9f 4f       	sbci	r25, 0xFF	; 255
    12c2:	08 95       	ret

000012c4 <__fp_split3>:
    12c4:	57 fd       	sbrc	r21, 7
    12c6:	90 58       	subi	r25, 0x80	; 128
    12c8:	44 0f       	add	r20, r20
    12ca:	55 1f       	adc	r21, r21
    12cc:	59 f0       	breq	.+22     	; 0x12e4 <__fp_splitA+0x10>
    12ce:	5f 3f       	cpi	r21, 0xFF	; 255
    12d0:	71 f0       	breq	.+28     	; 0x12ee <__fp_splitA+0x1a>
    12d2:	47 95       	ror	r20

000012d4 <__fp_splitA>:
    12d4:	88 0f       	add	r24, r24
    12d6:	97 fb       	bst	r25, 7
    12d8:	99 1f       	adc	r25, r25
    12da:	61 f0       	breq	.+24     	; 0x12f4 <__fp_splitA+0x20>
    12dc:	9f 3f       	cpi	r25, 0xFF	; 255
    12de:	79 f0       	breq	.+30     	; 0x12fe <__fp_splitA+0x2a>
    12e0:	87 95       	ror	r24
    12e2:	08 95       	ret
    12e4:	12 16       	cp	r1, r18
    12e6:	13 06       	cpc	r1, r19
    12e8:	14 06       	cpc	r1, r20
    12ea:	55 1f       	adc	r21, r21
    12ec:	f2 cf       	rjmp	.-28     	; 0x12d2 <__fp_split3+0xe>
    12ee:	46 95       	lsr	r20
    12f0:	f1 df       	rcall	.-30     	; 0x12d4 <__fp_splitA>
    12f2:	08 c0       	rjmp	.+16     	; 0x1304 <__fp_splitA+0x30>
    12f4:	16 16       	cp	r1, r22
    12f6:	17 06       	cpc	r1, r23
    12f8:	18 06       	cpc	r1, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	f1 cf       	rjmp	.-30     	; 0x12e0 <__fp_splitA+0xc>
    12fe:	86 95       	lsr	r24
    1300:	71 05       	cpc	r23, r1
    1302:	61 05       	cpc	r22, r1
    1304:	08 94       	sec
    1306:	08 95       	ret

00001308 <__fp_zero>:
    1308:	e8 94       	clt

0000130a <__fp_szero>:
    130a:	bb 27       	eor	r27, r27
    130c:	66 27       	eor	r22, r22
    130e:	77 27       	eor	r23, r23
    1310:	cb 01       	movw	r24, r22
    1312:	97 f9       	bld	r25, 7
    1314:	08 95       	ret

00001316 <__mulsf3>:
    1316:	0b d0       	rcall	.+22     	; 0x132e <__mulsf3x>
    1318:	c4 cf       	rjmp	.-120    	; 0x12a2 <__fp_round>
    131a:	b5 df       	rcall	.-150    	; 0x1286 <__fp_pscA>
    131c:	28 f0       	brcs	.+10     	; 0x1328 <__mulsf3+0x12>
    131e:	ba df       	rcall	.-140    	; 0x1294 <__fp_pscB>
    1320:	18 f0       	brcs	.+6      	; 0x1328 <__mulsf3+0x12>
    1322:	95 23       	and	r25, r21
    1324:	09 f0       	breq	.+2      	; 0x1328 <__mulsf3+0x12>
    1326:	a6 cf       	rjmp	.-180    	; 0x1274 <__fp_inf>
    1328:	ab cf       	rjmp	.-170    	; 0x1280 <__fp_nan>
    132a:	11 24       	eor	r1, r1
    132c:	ee cf       	rjmp	.-36     	; 0x130a <__fp_szero>

0000132e <__mulsf3x>:
    132e:	ca df       	rcall	.-108    	; 0x12c4 <__fp_split3>
    1330:	a0 f3       	brcs	.-24     	; 0x131a <__mulsf3+0x4>

00001332 <__mulsf3_pse>:
    1332:	95 9f       	mul	r25, r21
    1334:	d1 f3       	breq	.-12     	; 0x132a <__mulsf3+0x14>
    1336:	95 0f       	add	r25, r21
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	55 1f       	adc	r21, r21
    133c:	62 9f       	mul	r22, r18
    133e:	f0 01       	movw	r30, r0
    1340:	72 9f       	mul	r23, r18
    1342:	bb 27       	eor	r27, r27
    1344:	f0 0d       	add	r31, r0
    1346:	b1 1d       	adc	r27, r1
    1348:	63 9f       	mul	r22, r19
    134a:	aa 27       	eor	r26, r26
    134c:	f0 0d       	add	r31, r0
    134e:	b1 1d       	adc	r27, r1
    1350:	aa 1f       	adc	r26, r26
    1352:	64 9f       	mul	r22, r20
    1354:	66 27       	eor	r22, r22
    1356:	b0 0d       	add	r27, r0
    1358:	a1 1d       	adc	r26, r1
    135a:	66 1f       	adc	r22, r22
    135c:	82 9f       	mul	r24, r18
    135e:	22 27       	eor	r18, r18
    1360:	b0 0d       	add	r27, r0
    1362:	a1 1d       	adc	r26, r1
    1364:	62 1f       	adc	r22, r18
    1366:	73 9f       	mul	r23, r19
    1368:	b0 0d       	add	r27, r0
    136a:	a1 1d       	adc	r26, r1
    136c:	62 1f       	adc	r22, r18
    136e:	83 9f       	mul	r24, r19
    1370:	a0 0d       	add	r26, r0
    1372:	61 1d       	adc	r22, r1
    1374:	22 1f       	adc	r18, r18
    1376:	74 9f       	mul	r23, r20
    1378:	33 27       	eor	r19, r19
    137a:	a0 0d       	add	r26, r0
    137c:	61 1d       	adc	r22, r1
    137e:	23 1f       	adc	r18, r19
    1380:	84 9f       	mul	r24, r20
    1382:	60 0d       	add	r22, r0
    1384:	21 1d       	adc	r18, r1
    1386:	82 2f       	mov	r24, r18
    1388:	76 2f       	mov	r23, r22
    138a:	6a 2f       	mov	r22, r26
    138c:	11 24       	eor	r1, r1
    138e:	9f 57       	subi	r25, 0x7F	; 127
    1390:	50 40       	sbci	r21, 0x00	; 0
    1392:	8a f0       	brmi	.+34     	; 0x13b6 <__mulsf3_pse+0x84>
    1394:	e1 f0       	breq	.+56     	; 0x13ce <__mulsf3_pse+0x9c>
    1396:	88 23       	and	r24, r24
    1398:	4a f0       	brmi	.+18     	; 0x13ac <__mulsf3_pse+0x7a>
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	bb 1f       	adc	r27, r27
    13a0:	66 1f       	adc	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	91 50       	subi	r25, 0x01	; 1
    13a8:	50 40       	sbci	r21, 0x00	; 0
    13aa:	a9 f7       	brne	.-22     	; 0x1396 <__mulsf3_pse+0x64>
    13ac:	9e 3f       	cpi	r25, 0xFE	; 254
    13ae:	51 05       	cpc	r21, r1
    13b0:	70 f0       	brcs	.+28     	; 0x13ce <__mulsf3_pse+0x9c>
    13b2:	60 cf       	rjmp	.-320    	; 0x1274 <__fp_inf>
    13b4:	aa cf       	rjmp	.-172    	; 0x130a <__fp_szero>
    13b6:	5f 3f       	cpi	r21, 0xFF	; 255
    13b8:	ec f3       	brlt	.-6      	; 0x13b4 <__mulsf3_pse+0x82>
    13ba:	98 3e       	cpi	r25, 0xE8	; 232
    13bc:	dc f3       	brlt	.-10     	; 0x13b4 <__mulsf3_pse+0x82>
    13be:	86 95       	lsr	r24
    13c0:	77 95       	ror	r23
    13c2:	67 95       	ror	r22
    13c4:	b7 95       	ror	r27
    13c6:	f7 95       	ror	r31
    13c8:	e7 95       	ror	r30
    13ca:	9f 5f       	subi	r25, 0xFF	; 255
    13cc:	c1 f7       	brne	.-16     	; 0x13be <__mulsf3_pse+0x8c>
    13ce:	fe 2b       	or	r31, r30
    13d0:	88 0f       	add	r24, r24
    13d2:	91 1d       	adc	r25, r1
    13d4:	96 95       	lsr	r25
    13d6:	87 95       	ror	r24
    13d8:	97 f9       	bld	r25, 7
    13da:	08 95       	ret

000013dc <_exit>:
    13dc:	f8 94       	cli

000013de <__stop_program>:
    13de:	ff cf       	rjmp	.-2      	; 0x13de <__stop_program>
